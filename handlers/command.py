from aiogram import types, Router
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext

from keyboards import *

import os
from pathlib import Path
from redis.asyncio import Redis


router_com = Router()


@router_com.message(Command("start"), StateFilter(None))
async def start_command(message: types.Message):
    await message.answer(text="üëã *–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –ü–æ–ª–∏–º–µ–¥–∏–∫–∏*. \n\nü§ñ –Ø —Ä–∞–±–æ—Ç–∞—é *24 —á–∞—Å–∞ –±–µ–∑ "
                              "–≤—ã—Ö–æ–¥–Ω—ã—Ö* –∏ –º–æ–≥—É –ø–æ–º–æ—á—å —Å: \n"
                              "‚úî *–ó–∞–ø–∏—Å—å—é –∫ —É—á–∞—Å—Ç–∫–æ–≤–æ–º—É —Ç–µ—Ä–∞–ø–µ–≤—Ç—É* - –ø–æ–¥—Å–∫–∞–∂—É –í–∞—à—É –∫–ª–∏–Ω–∏–∫—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏ "
                              "–∫–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º;\n"
                              "‚úî *–î–∏—Å–ø–∞–Ω—Å–µ—Ä–∏–∑–∞—Ü–∏–µ–π* - –ø–æ–º–æ–≥—É –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞—Ä–∞–Ω–µ–µ;\n"
                              "‚úî *–°–ø—Ä–∞–≤–∫–∞–º–∏ –æ–Ω–ª–∞–π–Ω* - –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ, –∏ –∑–∞–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—É—é —Å–ø—Ä–∞–≤–∫—É "
                              "–≤ –∫–ª–∏–Ω–∏–∫–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è;\n"
                              "‚úî *–û–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é* - –ø—Ä–∏–º—É –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è\n\n"
                              "üëá *–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é*",
                         reply_markup=menu_kb())
    await message.delete()


@router_com.message(Command("reboot"), StateFilter("*"))
async def reboot_command(message: types.Message, state: FSMContext, redis: Redis):
    from .callback import answers_dict, questions_dict, questions_list, digit_answer, conditional_answer
    await redis.delete(f"del_mes_{str(message.from_user.id)}")
    await redis.delete(f"del_tech_{str(message.from_user.id)}")
    data = await state.get_data()
    if "one_completed_questionnaire" in data:
        os.remove(Path("data") / f"{data['one_completed_questionnaire']}.pdf")
    await state.clear()
    await message.answer(text="üîÑ *–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω - —Ç–µ–ø–µ—Ä—å –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n\n"
                              "üëá –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π*",
                         reply_markup=menu_kb())
    for struct in [answers_dict, questions_dict, questions_list, digit_answer, conditional_answer]:
        struct.clear()
    await message.delete()


@router_com.message(Command("author"), StateFilter(None))
async def author_command(message: types.Message):
    await message.answer(text="ü§Ø –û–≥–æ, —Ç—ã –æ–∫–∞–∑–∞–ª—Å—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞—Ö–æ–¥—á–∏–≤—ã–º, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É! –¢–µ–±–µ —è–≤–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è"
                              " –±–æ—Ç, —á—Ç–æ –º–µ–Ω—è –Ω–µ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–¥–æ–≤–∞—Ç—å! –†–∞–∑ —Ç—ã —Ç—É—Ç, —Ç–æ —Ä–∞—Å—Å–∫–∞–∂—É –æ —Å–µ–±–µ:"
                              "\n\n–î–∞–Ω–Ω—ã–π –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç–æ–º –Æ–£—Ä–ì–£ - *–î–µ–≥—Ç—è—Ä—å –ú–∞—Ç–≤–µ–µ–º* üéì\n\n"
                              "üìö –§–∞–∫—É–ª—å—Ç–µ—Ç: –í—ã—Å—à–∞—è —à–∫–æ–ª–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –Ω–∞—É–∫\n"
                              "üíª –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n"
                              "üìÜ –ì–æ–¥ –æ–±—É—á–µ–Ω–∏—è: 3 –∫—É—Ä—Å (2025 –≥–æ–¥)\n\n"
                              "üì¨ [–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º](tg://user?id=1245744572)\n\n"
                              "‚ú® –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—à—å—Å—è –±–æ—Ç–æ–º!")
