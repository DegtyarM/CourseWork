from aiogram import F, Router, flags
from aiogram.enums import ChatAction
from aiogram.filters import StateFilter, or_f
from aiogram.types import InputMediaPhoto, ReplyParameters

from utils import *
from filters import *
from database import WrongAddresses
from states import Address, EditComplaint

import os
from pathlib import Path
from datetime import datetime
from redis.asyncio import Redis
from sqlalchemy.ext.asyncio import AsyncSession


router_m = Router()


"""******************************************* –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–• –ß1 ********************************************"""


@router_m.message(F.text.contains('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'), or_f(StateFilter(Address), StateFilter(Complaint),
                                                      StateFilter(EditComplaint), StateFilter(MedExam),
                                                      StateFilter(Certificates)), flags={"throttle": "check"})
async def know_clinic(message: types.Message, state: FSMContext, redis: Redis):
    from .callback import answers_dict, questions_dict, questions_list, digit_answer, conditional_answer
    thing = message.text[11:].capitalize()
    text = {"–ü–æ–∏—Å–∫": "—ë–Ω", "–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è": "–µ–Ω–æ", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ": "–µ–Ω–æ",
            "–ê–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ": "–µ–Ω–æ", "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏": "–µ–Ω–æ"}
    await message.delete()
    await delete_redis_mes(message, redis, f"del_mes_{str(message.from_user.id)}")
    if thing == "–ò–∑–º–µ–Ω–µ–Ω–∏–µ":
        last_word = await last_word_in_state(state)
        param = {"topic": "—Ç–µ–º—ã", "name": "–§–ò–û", "birth": "–¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è", "number": "–Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                 "complaint": "—Ç–µ–∫—Å—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è", "file": "—Ñ–∞–π–ª–∞"}
        del_mes_1 = await message.answer(text="üõë " + thing + " " + param[last_word] + " –æ—Ç–º–µ–Ω" + text[thing])
        await edited_complaint(message, state, 0, redis)
        await redis.lpush(f"del_tech_{str(message.from_user.id)}", *[del_mes_1.message_id])
        return
    else:
        if thing == "–ê–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
            data = await state.get_data()
            if "one_completed_questionnaire" in data:
                os.remove(Path("data") / f"{data['one_completed_questionnaire']}.pdf")
        await message.answer(text="üõë " + thing + " –æ—Ç–º–µ–Ω" + text[thing], reply_markup=menu_kb())
        await state.clear()
    for struct in [answers_dict, questions_dict, questions_list, digit_answer, conditional_answer]:
        struct.clear()
    await delete_redis_mes(message, redis, f"del_tech_{str(message.from_user.id)}")


@router_m.message(lambda message: not message.document,
                  or_f(StateFilter(Complaint.file), StateFilter(EditComplaint.edit_file)), flags={"throttle": "check"})
async def make_complaint_not_file(message: types.Message, redis: Redis, album: list = None):
    if not album:
        await redis.lpush(f"del_mes_{str(message.from_user.id)}", *[message.message_id])
    del_mes_1 = await message.answer(text="üìÑ *–û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.*\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ "
                                          "'*–ë–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞*' –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã—à–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:",
                                     reply_markup=cancel_kb("create", "üëà –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç"))
    await redis.lpush(f"del_tech_{str(message.from_user.id)}", *[del_mes_1.message_id])


@router_m.message(or_f(StateFilter(Address.confirm), StateFilter(Complaint.agreement),
                       StateFilter(Complaint.topic), StateFilter(EditComplaint.edit_topic),
                       StateFilter(MedExam.agreement), StateFilter(MedExam.gender), StateFilter(MedExam.questions),
                       StateFilter(MedExam.pregnant), StateFilter(Certificates.contact_test),
                       StateFilter(Certificates.c70_gender), StateFilter(Certificates.c70_disable),
                       StateFilter(Certificates.c70_dis_group), StateFilter(Certificates.c70_accompany),
                       StateFilter(Certificates.agreement)),
                  flags={"throttle": "check"})
async def not_clicked_button(message: types.Message, state: FSMContext, redis: Redis, album: dict = None):
    last_word = await last_word_in_state(state)
    message_text = "–í—ã –Ω–µ –¥–∞–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤—ã—à–µ"
    param_to_text_keyboard = {
        "confirm": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –∏–ª–∏ –Ω–µ—Å–æ–≥–ª–∞—Å–∏–µ –≤—ã—à–µ.",
        "agreement": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –∏–ª–∏ –æ—Ç–∫–∞–∑ –≤—ã—à–µ.",
        "topic": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ.",
        "gender": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –í–∞—à –ø–æ–ª –≤—ã—à–µ.",
        "c70_gender": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –í–∞—à –ø–æ–ª –≤—ã—à–µ.",
        "questions": "–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã.",
    }
    message_text = param_to_text_keyboard.get(last_word, message_text)
    if not album:
        await message.delete()
    del_mes_1 = await message.answer(text=message_text + " üëÜ\n–°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
    await redis.lpush(f"del_tech_{str(message.from_user.id)}", *[del_mes_1.message_id])


@router_m.message(StateFilter(Complaint.final), flags={"throttle": "check"})
async def make_complaint_not_file(message: types.Message, redis: Redis, album: dict = None):
    if not album:
        await message.delete()
    del_mes_1 = await message.answer(text="üì® –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *'–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É'* –≤—ã—à–µ, "
                                          "—á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
    await redis.lpush(f"del_tech_{str(message.from_user.id)}", *[del_mes_1.message_id])


@router_m.message(F.text, or_f(StateFilter(Complaint), StateFilter(EditComplaint), StateFilter(MedExam),
                               StateFilter(Certificates)),
                  ValidMessageText(),
                  flags={"throttle": "check"})
async def valid_text(message: types.Message, state: FSMContext, err_text_filter, redis: Redis):
    last_word = await last_word_in_state(state)
    if "_" in last_word:
        last_word = last_word.split("_")[-1]
    hint_dict = {
        "name": "–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ",
        "birth": "–¥–¥.–º–º.–≥–≥–≥–≥",
        "number": "+7xxxxxxxxxx",
        "address": "–ê–¥—Ä–µ—Å –ø–æ –ø–∞—Å–ø–æ—Ä—Ç—É",
        "year": "–≥–≥–≥–≥",
        "polis": "–ù–æ–º–µ—Ä –ø–æ–ª–∏—Å–∞ –û–ú–°",
        "mse": "–°–µ—Ä–∏—è –ù–æ–º–µ—Ä –î–∞—Ç–∞",
        "snils": "123-456-789 00",
        "complaint": None,
    }
    hint = hint_dict.get(last_word, None)
    keyb = await identification_cancel_kb(state, hint)
    del_mes_1 = await message.answer(text=err_text_filter, reply_markup=keyb)
    await redis.lpush(f"del_tech_{str(message.from_user.id)}", *[del_mes_1.message_id, message.message_id])


@router_m.message(StateFilter(MedExam.birth), F.text, ~MedExamYearValid())
async def med_exam_year(message: types.Message, state: FSMContext, redis: Redis):
    await message.answer(text="‚ùå *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í—ã –Ω–µ –≤—Ö–æ–¥–∏—Ç–µ –≤ –ø–µ—Ä–µ—á–µ–Ω—å –≥—Ä–∞–∂–¥–∞–Ω, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–æ–π—Ç–∏ –¥–∏—Å–ø–∞–Ω—Å–µ—Ä–∏–∑–∞—Ü–∏—é"
                              " –≤ —ç—Ç–æ–º –≥–æ–¥—É.*\n\n‚úÖ –û–¥–Ω–∞–∫–æ –í—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ *–ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π "
                              "–æ—Å–º–æ—Ç—Ä* - –æ–Ω –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –µ–∂–µ–≥–æ–¥–Ω–æ –∏ –≤–∫–ª—é—á–∞–µ—Ç –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è.\n\n"
                              "üìå –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –∑–∞–ø–∏—Å–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–≤–æ—é –∫–ª–∏–Ω–∏–∫—É –ø–æ –º–µ—Å—Ç—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è.",
                         reply_markup=menu_kb())
    await delete_redis_mes(message, redis, f"del_mes_{str(message.from_user.id)}")
    await delete_redis_mes(message, redis, f"del_tech_{str(message.from_user.id)}")
    await state.clear()


@router_m.message(StateFilter(Certificates.contact_birth_year), F.text, ~ContactCertificateYearValid())
async def contact_year_is_under_18(message: types.Message, state: FSMContext, redis: Redis):
    await message.delete()
    await message.answer(text="‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫—É –æ –Ω–µ–∫–æ–Ω—Ç–∞–∫—Ç–µ –æ–Ω–ª–∞–π–Ω –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç.*"
                              "\n\nüìå –ï—Å–ª–∏ –í–∞–º –≤—Å—ë –∂–µ –Ω—É–∂–Ω–∞ —Ç–∞–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –∫–ª–∏–Ω–∏–∫—É –ø–æ –º–µ—Å—Ç—É "
                              "–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è - —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø–æ–º–æ–≥—É—Ç –æ—Ñ–æ—Ä–º–∏—Ç—å –µ—ë –ª–∏—á–Ω–æ.", reply_markup=menu_kb())
    await delete_redis_mes(message, redis, f"del_mes_{str(message.from_user.id)}")
    await delete_redis_mes(message, redis, f"del_tech_{str(message.from_user.id)}")
    await state.clear()


@router_m.message(StateFilter(Complaint.complaint), ComplaintWithFile(), flags={"throttle": "check"})
async def can_not_add_file(message: types.Message, state: FSMContext, redis: Redis):
    await state.update_data(complaint=message.text)
    del_mes_1 = await message.answer(
        text=f"üìù *–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(message.text)} —Å–∏–º–≤–æ–ª–æ–≤ - —ç—Ç–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è "
             f"–¥–æ–∫—É–º–µ–Ω—Ç–∞.*\n\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –¥–æ *590 —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –º–µ–Ω—å—à–µ*.\n"
             f"–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –≤ —Ä–∞–∑–¥–µ–ª–µ *¬´–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ¬ª*.")
    await redis.lpush(f"del_tech_{str(message.from_user.id)}", *[del_mes_1.message_id])
    await redis.lpush(f"del_mes_{str(message.from_user.id)}", *[message.message_id])
    data = await state.get_data()
    await message.answer(text=complaint_text(data, 2, 0),
                         reply_markup=change_complaint_ikb())
    await state.set_state(Complaint.final)
    await delete_redis_mes(message, redis, f"del_mes_{str(message.from_user.id)}")


@router_m.message(StateFilter(MedExam.digit_answer), ~DigitMessage(), flags={"throttle": "check"})
async def message_is_not_digit(message: types.Message, redis: Redis):
    del_mes_1 = await message.answer(text="üî¢ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤*.\n"
                                          "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –≤–≤–æ–¥–∞:",
                                     reply_markup=cancel_kb("med_exam"))
    await redis.lpush(f"del_tech_{str(message.from_user.id)}", *[message.message_id, del_mes_1.message_id])


"""*********************************** –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–õ–ò–ù–ò–ö–ê–• –ò –ü–†–ò–ö–†–ï–ü–õ–ï–ù–ò–ò ***********************************"""


@router_m.message(F.text == 'üè• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–Ω–∏–∫–∞—Ö –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–∏', StateFilter(None), flags={"throttle": "check"})
@flags.chat_action(action=ChatAction.UPLOAD_PHOTO)
async def schedule(message: types.Message, redis: Redis):
    redis_key = f"schedule_msg_{str(message.from_user.id)}"
    del_mes_1 = await message.bot.send_photo(chat_id=message.from_user.id,
                                             caption='*–ê–¥—Ä–µ—Å–∞ –ü–æ–ª–∏–º–µ–¥–∏–∫–∏ –≤ –ß–µ–ª—è–±–∏–Ω—Å–∫–µ* üëÜ',
                                             photo=types.FSInputFile(Path("data/clinic_schedule.jpg")),
                                             reply_markup=clinic_ikb())
    await delete_redis_mes(message, redis, redis_key)
    await redis.lpush(redis_key, *[del_mes_1.message_id, message.message_id])


@router_m.message(F.text, StateFilter(Address.address), flags={"throttle": "check", "database": "commit"})
@flags.chat_action(action=ChatAction.FIND_LOCATION)
async def check_address(message: types.Message, state: FSMContext, session: AsyncSession, redis: Redis):
    result, useless_thing_here, coordinates = find_clinic_by_address(message.text)
    await redis.lpush(f"del_mes_{str(message.from_user.id)}", *[message.message_id])
    if "–í—ã —É–≤–µ—Ä–µ–Ω—ã" in result:
        await session.merge(WrongAddresses(user_id=message.from_user.id, address=message.text[:100], place="–ü–æ–∏—Å–∫"))
        del_mes_1 = await message.answer(text=result, reply_markup=confirm_ikb())
        await redis.lpush(f"del_mes_{str(message.from_user.id)}", *[del_mes_1.message_id])
        await state.set_state(Address.confirm)
    else:
        await message.bot.send_venue(chat_id=message.from_user.id, latitude=coordinates[0], longitude=coordinates[1],
                                     title="–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –∫–ª–∏–Ω–∏–∫–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è", address="")
        await message.answer(text=result,
                             reply_markup=menu_kb())
        await message.answer(text="‚úçÔ∏è –î–ª—è –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É —Å–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 2dr –ø–æ –æ–¥–Ω–æ–π –∏–∑ —Å—Å—ã–ª–æ–∫ –Ω–∏–∂–µ "
                                  "–∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å [—Å–∞–π—Ç–æ–º](https://74.2dr.ru/)",
                             reply_markup=app_links_ikb(),
                             disable_web_page_preview=True)
        await delete_redis_mes(message, redis, f"del_mes_{str(message.from_user.id)}")
        await state.set_state(None)


"""************************************* –û–§–û–†–ú–õ–ï–ù–ò–ï –ñ–ê–õ–û–ë –ò –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ô **************************************"""


@router_m.message(F.text == 'üìù –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∂–∞–ª–æ–± –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π', StateFilter(None), flags={"throttle": "check"})
@flags.chat_action(action=ChatAction.UPLOAD_DOCUMENT)
async def make_complaint(message: types.Message, state: FSMContext, redis: Redis):
    await call_agreement(message, redis)
    await state.set_state(Complaint.agreement)


@router_m.message(F.text, StateFilter(Complaint), flags={"throttle": "check"})
async def make_complaint_contains_text(message: types.Message, state: FSMContext, redis: Redis):
    await delete_redis_mes(message, redis, f"del_tech_{str(message.from_user.id)}")
    last_word = await last_word_in_state(state)
    param_to_text_keyboard = {
        "name": ("–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¥–¥.–º–º.–≥–≥–≥–≥':", cancel_kb("create", "–¥–¥.–º–º.–≥–≥–≥–≥"), "birth"),
        "birth": ("–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Å–≤—è–∑–∏, –Ω–∞—á–∏–Ω–∞—è —Å +7 –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤:",
                  cancel_kb("create", "+7xxxxxxxxxx"), "number"),
        "number": ("–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –∂–∞–ª–æ–±—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.\n\n‚ö†Ô∏è *–£—á—Ç–∏—Ç–µ:* –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç *590 —Å–∏–º–≤–æ–ª–æ–≤*, –í—ã –Ω–µ "
                   "—Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç.\n‚ö†Ô∏è –ü—Ä–∏ –æ–±—ä—ë–º–µ –±–æ–ª–µ–µ *4090 —Å–∏–º–≤–æ–ª–æ–≤* —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
                   " —Å–æ–∫—Ä–∞—â–µ–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ Telegram.",
                   cancel_kb("create"), "complaint"),
        "complaint": ("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.\n\n‚ö†Ô∏è *–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ç–æ–ª—å–∫–æ 1 —Ñ–∞–π–ª!* –ï—Å–ª–∏"
                      " –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ - –±—É–¥–µ—Ç —É—á—Ç—ë–Ω —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π.\n\n–ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É"
                      " '–ë–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞'", document_no_ikb(), "file"),
    }
    if last_word in param_to_text_keyboard:
        text, keyb, new_state = param_to_text_keyboard[last_word]
        await state.update_data({last_word: message.text})
        del_mes_1 = await message.answer(text=text, reply_markup=keyb)
        await redis.lpush(f"del_mes_{str(message.from_user.id)}", *[del_mes_1.message_id, message.message_id])
        await state.set_state(getattr(Complaint, new_state))


@router_m.message(F.document, StateFilter(Complaint.file))
async def make_complaint_file(message: types.Message, redis: Redis, state: FSMContext = None, album: list = None):
    await delete_redis_mes(message, redis, f"del_tech_{str(message.from_user.id)}")
    if album:
        first = await pinned_first_doc(message, album, redis)
        await state.update_data(file=first.document.file_id)
    else:
        await state.update_data(file=message.document.file_id)
    data = await state.get_data()
    del_mes_1 = await message.answer(text="‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
                                     reply_markup=ReplyKeyboardRemove())
    await redis.lpush(f"del_tech_{str(message.from_user.id)}", *[del_mes_1.message_id])
    await message.bot.send_document(chat_id=message.from_user.id,
                                    document=str(data["file"]),
                                    caption=complaint_text(data, 2, 0),
                                    reply_markup=change_complaint_ikb())
    await redis.lpush(f"del_mes_{str(message.from_user.id)}", *[message.message_id])
    await delete_redis_mes(message, redis, f"del_mes_{str(message.from_user.id)}")
    await state.set_state(Complaint.final)


"""******************************************** –ò–ó–ú–ï–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• *********************************************"""


@router_m.message(F.text, StateFilter(EditComplaint), flags={"throttle": "check"})
async def edit_complaint_contains_text(message: types.Message, state: FSMContext, redis: Redis):
    await delete_redis_mes(message, redis, f"del_tech_{str(message.from_user.id)}")
    last_word = await last_word_in_state(state)
    await edited_complaint(message, state, 1, redis, last_word, message.text)
    await redis.lpush(f"del_mes_{str(message.from_user.id)}", *[message.message_id])
    await delete_redis_mes(message, redis, f"del_mes_{str(message.from_user.id)}")


@router_m.message(F.document, StateFilter(EditComplaint.edit_file), flags={"throttle": "check"})
async def make_complaint_file(message: types.Message, state: FSMContext, redis: Redis, album: list = None):
    await delete_redis_mes(message, redis, f"del_tech_{str(message.from_user.id)}")
    if album:
        first = await pinned_first_doc(message, album, redis)
        await edited_complaint(message, state, 1, redis, "file", first.document.file_id)
    else:
        await edited_complaint(message, state, 1, redis, "file", message.document.file_id)
    await redis.lpush(f"del_mes_{str(message.from_user.id)}", *[message.message_id])
    await delete_redis_mes(message, redis, f"del_mes_{str(message.from_user.id)}")


"""****************************************** –ü–†–û–ô–¢–ò –î–ò–°–ü–ê–ù–°–ï–†–ò–ó–ê–¶–ò–Æ *******************************************"""


@router_m.message(F.text == 'ü©∫ –ü—Ä–æ–π—Ç–∏ –¥–∏—Å–ø–∞–Ω—Å–µ—Ä–∏–∑–∞—Ü–∏—é', StateFilter(None), flags={"throttle": "check"})
@flags.chat_action(action=ChatAction.UPLOAD_PHOTO)
async def start_medical_exam(message: types.Message, redis: Redis):
    redis_key = f"med_exam_msg_{str(message.from_user.id)}"
    med_exam_list = await message.bot.send_media_group(
        chat_id=message.from_user.id,
        media=[InputMediaPhoto(media=types.FSInputFile(Path("data/med_exam/man_med_exam.jpg"))),
               InputMediaPhoto(media=types.FSInputFile(Path("data/med_exam/woman_med_exam.jpg"))),])
    base_year = [1983, 1986, 1989, 1992, 1995, 1998, 2001, 2004, 2007]
    med_exam_years_list = [str(year + datetime.now().year - 2025) for year in base_year]
    years_text = ", ".join(med_exam_years_list)
    med_exam_text = await message.answer(text="‚ÄºÔ∏è *–†–∞–±–æ—Ç–∞—é—â–∏–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –æ–ø–ª–∞—á–∏–≤–∞–µ–º–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ "
                                              "–æ—Ç —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ 1 —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –¥–∏—Å–ø–∞–Ω—Å–µ—Ä–∏–∑–∞—Ü–∏–∏!*"
                                              f"  (–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π –¥–µ–Ω—å –æ—Ç–¥—ã—Ö–∞ –¥–ª—è –≥–æ–¥–æ–≤ —Ä–æ–∂–¥–µ–Ω–∏—è *{years_text}*, –∞ —Ç–∞–∫–∂–µ "
                                              f"*–≤—Å–µ–º —Å—Ç–∞—Ä—à–µ 40 –ª–µ—Ç*)"
                                              "\n\nü§ñ –ù–∞—à –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–∂–µ *—Å–µ–π—á–∞—Å –∑–∞–ø–æ–ª–Ω–∏—Ç—å "
                                              "–∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ*, —á—Ç–æ–±—ã —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –í–∞—à–µ –≤—Ä–µ–º—è. \n\n*–î–æ –Ω–∞—á–∞–ª–∞"
                                              " –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –¥–∏—Å–ø–∞–Ω—Å–µ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª—Å—è –≤—Å–µ–≥–æ –æ–¥–∏–Ω —à–∞–≥!* üëá",
                                         reply_markup=med_exam_ikb())
    await delete_redis_mes(message, redis, redis_key)
    await redis.lpush(redis_key, *([msg.message_id for msg in med_exam_list] +
                                   [med_exam_text.message_id, message.message_id]))


@router_m.message(F.text, or_f(StateFilter(MedExam.name), StateFilter(MedExam.birth),
                               StateFilter(MedExam.number)), flags={"throttle": "check"})
async def med_exam_contains_text(message: types.Message, state: FSMContext, redis: Redis):
    await delete_redis_mes(message, redis, f"del_tech_{str(message.from_user.id)}")
    last_word = await last_word_in_state(state)
    param_to_text_keyboard = {
        "birth": ("–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Å–≤—è–∑–∏, –Ω–∞—á–∏–Ω–∞—è —Å +7 –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤:",
                  cancel_kb("med_exam", "+7xxxxxxxxxx"), "number"),
        "number": ("–£–∫–∞–∂–∏—Ç–µ –í–∞—à–∏ –§–∞–º–∏–ª–∏—é –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏):",
                   cancel_kb("med_exam", "–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ"), "name"),
        "name": ("–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –ø–æ–ª:", gender_ikb(), "gender"),
    }
    if last_word in param_to_text_keyboard:
        text, keyb, new_state = param_to_text_keyboard[last_word]
        await state.update_data({last_word: message.text})
        del_mes_1 = await message.answer(text=text, reply_markup=keyb)
        await redis.lpush(f"del_mes_{str(message.from_user.id)}", *[del_mes_1.message_id, message.message_id])
        await state.set_state(getattr(MedExam, new_state))


@router_m.message(F.text, or_f(StateFilter(MedExam.digit_answer), StateFilter(MedExam.write_answer)),
                  flags={"throttle": "check"})
async def med_exam_digit_answer(message: types.Message, state: FSMContext, redis: Redis):
    from .callback import answers_dict, questions_list
    await redis.lpush(f"del_tech_{str(message.from_user.id)}", *[message.message_id])
    data, msg_text, key, key_word = await write_answer_to_dict(message, state, "w")
    if data["q_num"] + 1 == len(questions_list):
        await finish_questionnaire(message, state, data, key, key_word, redis)
        return
    if key in ['1', '12', '13', "60", "2"]:  # 2 - –º—É–∂, –æ—Å—Ç–∞–ª—å–Ω–æ–µ - –∂–µ–Ω
        answers_dict[key_word] = message.text + " " + get_age_suffix(int(message.text))
    if key in ['3_s', '4_s', '10_a']:
        answers_dict[key_word] = message.text + " " + get_day_suffix(int(message.text))
    if key == '11':
        answers_dict[key_word] = message.text + " –¥–µ–Ω—å"
    key_1 = questions_list[data["q_num"] + 1]
    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–µ—Ç–µ–π –∏ –æ—Ç–≤–µ—Ç "0", —Ç–æ –≤–æ–ø—Ä–æ—Å –æ –Ω–∞–∏–º–µ–Ω—å—à–µ–º –≤–æ–∑—Ä–∞—Å—Ç–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if message.text == "0" and questions_list[data["q_num"]] == "59":
        await skip_questions_women_med_exam(message, state, data, key_word, redis)
        return
    # –í–æ–ø—Ä–æ—Å –æ —Ç–æ–º, —Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ –ø—Ä–æ—à–ª–æ —Å –∫–æ–≤–∏–¥–∞, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –∏ –ø—Ä–∏—Å—ã–ª–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å (–Ω–µ –≤—Å–µ)
    if key == "c_2":
        answers_dict["d_c_2"] = message.text
        del_mes_1 = await message.answer(text="–£–∫–∞–∂–∏—Ç–µ —Å—Ç–µ–ø–µ–Ω—å —Ç—è–∂–µ—Å—Ç–∏ –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–Ω–æ–π –∏–Ω—Ñ–µ–∫—Ü–∏–∏ "
                                              "(COVID-19) –≤ –í–∞—à–µ–º —Å–ª—É—á–∞–µ:",
                                         reply_markup=level_ikb())
        await redis.lpush(f"del_tech_{str(message.from_user.id)}", *[del_mes_1.message_id])
        await state.set_state(MedExam.questions)
        return
    await transition_to_state_questions(message, state, data, key_word, key_1, key, redis)


"""********************************************** –ó–ê–ö–ê–ó –°–ü–†–ê–í–û–ö ***********************************************"""


@router_m.message(F.text == "üìÑ –ó–∞–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ–Ω–ª–∞–π–Ω", StateFilter(None), flags={"throttle": "check"})
async def start_certificate(message: types.Message, state: FSMContext, redis: Redis):
    del_mes_1 = await message.answer(text="üìÑ *–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å–ø—Ä–∞–≤–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:*", reply_markup=certificates_kb())
    await redis.lpush(f"del_mes_{str(message.from_user.id)}", *[del_mes_1.message_id])
    await state.set_state(Certificates.choice)


@router_m.message(F.text == "‚¨Ö –í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", StateFilter(Certificates.choice), flags={"throttle": "check"})
async def back_to_menu(message: types.Message, state: FSMContext, redis: Redis):
    await delete_redis_mes(message, redis, f"del_mes_{str(message.from_user.id)}")
    await delete_redis_mes(message, redis, f"del_tech_{str(message.from_user.id)}")
    await message.delete()
    await state.set_state(None)
    await message.answer(text="üè† *–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞.*\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ üëá",
                         reply_markup=menu_kb())


@router_m.message(F.text, StateFilter(Certificates.choice))
async def certificate_choose(message: types.Message, redis: Redis):
    await delete_redis_mes(message, redis, f"del_tech_{str(message.from_user.id)}")
    await message.delete()
    param_to_text_keyboard = {
        "–°–ø—Ä–∞–≤–∫–∞ –æ –Ω–µ–∫–æ–Ω—Ç–∞–∫—Ç–µ":
            "–°–ø—Ä–∞–≤–∫—É –æ —ç–ø–∏–¥–æ–∫—Ä—É–∂–µ–Ω–∏–∏ (—Å–ø—Ä–∞–≤–∫—É –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å –∏–Ω—Ñ–µ–∫—Ü–∏–æ–Ω–Ω—ã–º–∏ –±–æ–ª—å–Ω—ã–º–∏) —Ç–∞–∫–∂–µ –Ω–∞–∑—ã–≤–∞—é—Ç "
            "—Å–ø—Ä–∞–≤–∫–æ–π ¬´–æ –Ω–µ–∫–æ–Ω—Ç–∞–∫—Ç–µ¬ª. –≠—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –Ω–µ –Ω–∞—Ö–æ–¥–∏–ª—Å—è –≤ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π "
            "–±–ª–∏–∑–æ—Å—Ç–∏ —Å –ª—é–¥—å–º–∏, –±–æ–ª—å–Ω—ã–º–∏ –∏–Ω—Ñ–µ–∫—Ü–∏–æ–Ω–Ω—ã–º–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º–∏, –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ "
            "(–æ–±—ã—á–Ω–æ 21 –¥–Ω—è –∏–ª–∏ 14 –¥–Ω–µ–π).\n\nüïí *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è - 3 –¥–Ω—è —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –≤ –∫–ª–∏–Ω–∏–∫–µ.*",
        "–°–ø—Ä–∞–≤–∫–∞ –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –¥–∏—Å–ø–∞–Ω—Å–µ—Ä–∏–∑–∞—Ü–∏–∏":
            "–°–ø—Ä–∞–≤–∫–∞ –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –¥–∏—Å–ø–∞–Ω—Å–µ—Ä–∏–∑–∞—Ü–∏–∏ - –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –ø–∞—Ü–∏–µ–Ω—Ç –ø—Ä–æ—à—ë–ª"
            " –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∏–ª–∏ –¥–∏—Å–ø–∞–Ω—Å–µ—Ä–Ω–æ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏."
            "\nüìå –ú–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–ª—è *—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è, —É—á—ë–±—ã –∏–ª–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –≤ –¥—Ä—É–≥–∏–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è*."
            "\n‚ö†Ô∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç—Ç–æ–π —Å–ø—Ä–∞–≤–∫–∏ *–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –¥–∏—Å–ø–∞–Ω—Å–µ—Ä–∏–∑–∞—Ü–∏—é*.",
        "–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–µ–≤–∫–∏ –Ω–∞ —Å–∞–Ω–∞—Ç–æ—Ä–Ω–æ-–∫—É—Ä–æ—Ä—Ç–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ":
            "–î–∞–Ω–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å–∞–Ω–∞—Ç–æ—Ä–Ω–æ-–∫—É—Ä–æ—Ä—Ç–Ω–æ–≥–æ –ª–µ—á–µ–Ω–∏—è.\n"
            "‚ö†Ô∏è –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —ç—Ç–æ–π —Å–ø—Ä–∞–≤–∫–∏ *–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å —Å–ø—Ä–∞–≤–∫—É –ú–°–≠* (–º–µ–¥–∏–∫–æ-—Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã)."
            "\n\nüïí *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è - 12 –º–µ—Å—è—Ü–µ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è*",
    }
    certificate_warning = ("\n\n\nüì§ –ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç *—à–∞–±–ª–æ–Ω —Å–ø—Ä–∞–≤–∫–∏* –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –µ–≥–æ –≤–∞–º. "
                           "–û–Ω –±—É–¥–µ—Ç *—á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω* –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–¥–∞–Ω –≤ –∫–ª–∏–Ω–∏–∫—É.\n"
                           "üìù *–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∏ –≤—ã–¥–∞—á–∞ —Å–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —Ç–æ–ª—å–∫–æ –≤ –∫–ª–∏–Ω–∏–∫–µ*, –ø—Ä–∏ –ª–∏—á–Ω–æ–º "
                           "–≤–∏–∑–∏—Ç–µ.\n\n‚ùóÔ∏è*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã*: –µ—Å–ª–∏ –¥–æ–ø—É—Å—Ç–∏—Ç–µ –æ—à–∏–±–∫—É, "
                           "–æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
    if message.text in param_to_text_keyboard:
        text = param_to_text_keyboard[message.text]
        del_mes_1 = await message.answer(text=f'"*{message.text}*"\n\n' + text + certificate_warning,
                                         reply_markup=certificate_agree_ikb())
        await redis.lpush(f"del_mes_{str(message.from_user.id)}", *[del_mes_1.message_id])
    else:
        del_mes_2 = await message.answer(text="‚ùóÔ∏è*–ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–π —Å–ø—Ä–∞–≤–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.*\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ "
                                              "–Ω–∏–∂–µ üëá –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥ –Ω—É–∂–Ω–æ–π —Å–ø—Ä–∞–≤–∫–æ–π üëÜ.",
                                         reply_markup=certificates_kb())
        await redis.lpush(f"del_mes_{str(message.from_user.id)}", *[del_mes_2.message_id])


@router_m.message(F.text, StateFilter(Certificates), flags={"throttle": "check", "database": "commit"})
async def certificates_questioning(message: types.Message, state: FSMContext, redis: Redis, session: AsyncSession):
    await delete_redis_mes(message, redis, f"del_tech_{str(message.from_user.id)}")
    await redis.lpush(f"del_mes_{str(message.from_user.id)}", *[message.message_id])
    last_word = await last_word_in_state(state)
    cert_name, parameter = last_word.split("_")[0], "_".join(last_word.split("_")[1:])
    address_text = (
        "üè† –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–ª–∏–Ω–∏–∫—É, –∫ –∫–æ—Ç–æ—Ä–æ–π –í—ã –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã: \n\n"
        "‚ÑπÔ∏è –ü—Ä–∏–º–µ—Ä –∞–¥—Ä–µ—Å–∞: `–°–∞–ª–∞–≤–∞—Ç–∞ –Æ–ª–∞–µ–≤–∞ 23–ê` \n\n"
        "üõ£ –ï—Å–ª–∏ –≤—ã –∂–∏–≤—ë—Ç–µ –≤ *–°–æ—Å–Ω–æ–≤—Å–∫–æ–º —Ä–∞–π–æ–Ω–µ*, –≤–≤–æ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: *¬´–ø–æ—Å—ë–ª–æ–∫, –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω, —É–ª–∏—Ü–∞¬ª* "
        "(–±–µ–∑ –Ω–æ–º–µ—Ä–∞ –¥–æ–º–∞)\n–ï—Å–ª–∏ –≤—ã –∏–∑ –ø–æ—Å—ë–ª–∫–æ–≤ *¬´–®–µ—Ä—à–Ω–∏¬ª, ¬´–¢–∞—Ä–∞—Å–æ–≤–∫–∞¬ª –∏–ª–∏ ¬´–ö–∞—Ä–ø–æ–≤ –ü—Ä—É–¥¬ª*, –≤–≤–æ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "
        "*¬´–ø–æ—Å—ë–ª–æ–∫, —É–ª–∏—Ü–∞¬ª* (–±–µ–∑ –Ω–æ–º–µ—Ä–∞ –¥–æ–º–∞)\n\n‚ùóÔ∏è*–í–∞–∂–Ω–æ: –±–æ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ñ–æ—Ä–º–∞—Ç—É!* –ù–µ —Å—Ç–∞–≤—å—Ç–µ –∑–∞–ø—è—Ç—É—é "
        "–º–µ–∂–¥—É —É–ª–∏—Ü–µ–π –∏ –Ω–æ–º–µ—Ä–æ–º –¥–æ–º–∞, –∞ –ª–∏—Ç–µ—Ä—É –∑–¥–∞–Ω–∏—è –ø–∏—à–∏—Ç–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–æ–º–µ—Ä–∞, –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞.")
    param_to_text_keyboard = {
        "exam": {"birth": (address_text, cancel_kb("certification", "–ê–¥—Ä–µ—Å –¥–æ–º–∞"), "address"),
                 "name": ("–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¥–¥.–º–º.–≥–≥–≥–≥':", cancel_kb("certification",
                                                                                          "–¥–¥.–º–º.–≥–≥–≥–≥"), "birth")},
        "contact": {"name": ("–í–≤–µ–¥–∏—Ç–µ –í–∞—à –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–≥–≥–≥:", cancel_kb("certification", "–≥–≥–≥–≥"),
                             "birth_year"),
                    "birth_year": ("–í—ã–µ–∑–∂–∞–ª–∏ –ª–∏ –í—ã –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –†–§, –≤ –≥. –ú–æ—Å–∫–≤–∞, –≤ –≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö"
                                   " 14 –¥–µ–Ω–π?", questions_ikb(), "test")},
        "c70": {"name": ("–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –ø–æ–ª:", gender_ikb(), "gender"),
                "birth": ("–í–≤–µ–¥–∏—Ç–µ –í–∞—à –∞–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ *–≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ*:",
                          cancel_kb("certification", "–ê–¥—Ä–µ—Å –ø–æ –ø–∞—Å–ø–æ—Ä—Ç—É"), "pass_address"),
                "pass_address": ("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –í–∞—à–µ–≥–æ –ø–æ–ª–∏—Å–∞ –û–ú–° (16 —Ü–∏—Ñ—Ä –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤):",
                                 cancel_kb("certification", "–ù–æ–º–µ—Ä –ø–æ–ª–∏—Å–∞ –û–ú–°"), "polis"),
                "polis": ("–Ø–≤–ª—è–µ—Ç–µ—Å—å –ª–∏ –í—ã –∏–Ω–≤–∞–ª–∏–¥–æ–º?", questions_ikb(), "disable"),
                "mse": ("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –í–∞—à–µ–≥–æ –°–ù–ò–õ–°–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '123-456-789 00':",
                        cancel_kb("certification", "123-456-789 00"), "snils"),
                "snils": ("–£–∫–∞–∂–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—É—Ä–æ—Ä—Ç–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –ª–µ—á–µ–Ω–∏–µ –¥–ª—è –í–∞—Å:",
                          cancel_kb("certification", "–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –ª–µ—á–µ–Ω–∏—è"), "preferred_place"),
                "preferred_place": (address_text, cancel_kb("certification", "–ê–¥—Ä–µ—Å –¥–æ–º–∞"), "address")}
    }
    if cert_name in param_to_text_keyboard and parameter in param_to_text_keyboard[cert_name]:
        text, keyb, new_state = param_to_text_keyboard[cert_name][parameter]
        if last_word in ("c70_polis", "c70_snils", "c70_birth"):
            prefix_mapping = {"c70_birth": "b", "c70_polis": "p", "c70_snils": "s"}
            data_to_save = {f"{prefix_mapping[last_word]}{i + 1}": digit for i, digit in enumerate(message.text)}
            await state.update_data(data_to_save)
        elif last_word == "c70_mse":
            series, number, date = message.text.split()
            date_digits = date.replace(".", "")
            data_to_save = {f"m{i + 1}": digit for i, digit in enumerate(date_digits)}
            await state.update_data(data_to_save, series=series, number=number)
        else:
            await state.update_data({parameter: message.text})
        del_mes_1 = await message.answer(text=text, reply_markup=keyb)
        await redis.lpush(f"del_mes_{str(message.from_user.id)}", *[del_mes_1.message_id])
        await state.set_state(getattr(Certificates, cert_name + "_" + new_state))
    else:
        await state.update_data({parameter: f"–≥. –ß–µ–ª—è–±–∏–Ω—Å–∫, —É–ª. {message.text}"})
        await state.update_data(day=str(datetime.now().day), month=get_month_name(str(datetime.now().month)),
                                year=str(datetime.now().year % 100))
        result_text, group_key, coordinates = find_clinic_by_address(message.text, "certificate")
        if "–í—ã —É–≤–µ—Ä–µ–Ω—ã" in result_text:
            await session.merge(WrongAddresses(user_id=message.from_user.id, address=message.text[:100],
                                               place="–°–ø—Ä–∞–≤–∫–∞"))
            result_text = "ü´¥ –ó–∞–±—Ä–∞—Ç—å –≥–æ—Ç–æ–≤—É—é —Å–ø—Ä–∞–≤–∫—É –í—ã –º–æ–∂–µ—Ç–µ –≤ –∫–ª–∏–Ω–∏–∫–µ –ø–æ –∞–¥—Ä–µ—Å—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è."
            group_key = "gid_rest"
        data = await state.get_data()
        notification = await message.bot.send_message(chat_id=message.from_user.id,
                                                      text="–ó–∞–ø–æ–ª–Ω—è—é –¥–æ–∫—É–º–µ–Ω—Ç...",
                                                      reply_markup=ReplyKeyboardRemove())
        async with ChatActionSender.upload_document(bot=message.bot, chat_id=message.chat.id):
            pdf_path = convert_docx_to_pdf(
                f"med_certificate/Cert{cert_name.capitalize()}", data,
                f"med_certificate/completed_c/–°–ø—Ä–∞–≤–∫–∞_{"_".join(data['name'].split()[:2])}_"
                f"{datetime.now().strftime("%H%M%S")}")
            await message.bot.delete_message(chat_id=message.from_user.id,
                                             message_id=notification.message_id)
            address_message = await message.bot.send_document(
                chat_id=message.from_user.id,
                document=types.FSInputFile(pdf_path),
                caption=f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Å–ø—Ä–∞–≤–∫—É!\n\n{result_text}",
                message_effect_id="5046509860389126442",
                reply_markup=menu_kb())
        if coordinates is not None:
            async with ChatActionSender.find_location(bot=message.bot, chat_id=message.chat.id):
                await message.bot.send_location(chat_id=message.from_user.id, latitude=coordinates[0],
                                                longitude=coordinates[1],
                                                reply_parameters=ReplyParameters(message_id=address_message.message_id,
                                                quote=":".join(result_text.split(":")[1:]).strip()))
        await message.bot.send_document(chat_id=await redis.get(group_key),
                                        document=types.FSInputFile(pdf_path),
                                        caption=f"*–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–ø—Ä–∞–≤–∫—É!*\n\nüìÑ –¢–∏–ø —Å–ø—Ä–∞–≤–∫–∏: *{data['cert_type']}*"
                                                f"\n\nüë§ –§–ò–û: *{data["name"]}*\nüè† –ê–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: "
                                                f"*{data["address"]}*\n\nüìÜ –î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏: "
                                                f"*{datetime.today().strftime("%d.%m.%Y")}*")
        await delete_redis_mes(message, redis, f"del_mes_{str(message.from_user.id)}")
        await state.clear()
        os.remove(pdf_path)


"""******************************************* –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–• –ß2 ********************************************"""


@router_m.message(~F.text, or_f(StateFilter(Address.address), StateFilter(Certificates.c70_address),
                                StateFilter(Certificates.contact_address), StateFilter(Certificates.exam_address),
                                StateFilter(Certificates.c70_pass_address)))
async def address_not_text(message: types.Message, state: FSMContext, redis: Redis, album: dict = None):
    if not album:
        await message.delete()
    keyb = await identification_cancel_kb(state, "–ê–¥—Ä–µ—Å –¥–æ–º–∞")
    str_state = await state.get_state()
    address_type = "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" if "pass_" in str_state else "–ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è"
    del_mes_1 = await message.answer(text=f"‚å®Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å {address_type} *—Ç–µ–∫—Å—Ç–æ–º!*\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É "
                                          f"–≤–≤–æ–¥–∞:", reply_markup=keyb)
    await redis.lpush(f"del_tech_{str(message.from_user.id)}", *[del_mes_1.message_id])


@router_m.message(~F.text, or_f(StateFilter(Complaint), StateFilter(EditComplaint), StateFilter(MedExam),
                                StateFilter(Certificates)))
async def make_complaint_not_text(message: types.Message, state: FSMContext, redis: Redis, album: dict = None):
    last_word = await last_word_in_state(state)
    str_state = await state.get_state()
    if str_state.startswith("Certificates") and "_" in last_word:
        last_word = last_word.split("_")[-1]
    prompt_template = "‚å®Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ {} *—Ç–µ–∫—Å—Ç–æ–º*.\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –≤–≤–æ–¥–∞:"
    param_to_text_keyboard = {
        "name": (prompt_template.format("–§–∞–º–∏–ª–∏—é –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)"), "–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ"),
        "birth": (prompt_template.format("–¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è"), "–¥–¥.–º–º.–≥–≥–≥–≥"),
        "number": (prompt_template.format("–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"), "+7xxxxxxxxxx"),
        "complaint": ("üî§ –û–±—Ä–∞—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ *—Ç–µ–∫—Å—Ç–æ–≤–æ–º* —Ñ–æ—Ä–º–∞—Ç–µ.\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –≤–≤–æ–¥–∞:", None),
        "write_answer": (prompt_template.format("–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π"), None),
        "digit_answer": ("üî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ *—Ç–µ–∫—Å—Ç–æ–º*, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.\n"
                         "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –≤–≤–æ–¥–∞:", None),
        "choice": ("‚ùóÔ∏è*–ü–æ—Ö–æ–∂–µ, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –≤–º–µ—Å—Ç–æ –≤—ã–±–æ—Ä–∞ —Å–ø—Ä–∞–≤–∫–∏.*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å–ø—Ä–∞–≤–∫—É"
                   " –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ üëá –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –µ—ë –æ–ø–∏—Å–∞–Ω–∏–µ–º üëÜ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ.", None),
        "year": (prompt_template.format("–≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è"), "–≥–≥–≥–≥"),
        "polis": (prompt_template.format("–Ω–æ–º–µ—Ä –ø–æ–ª–∏—Å–∞"), "–ù–æ–º–µ—Ä –ø–æ–ª–∏—Å–∞ –û–ú–°"),
        "mse": (prompt_template.format("–¥–∞–Ω–Ω—ã–µ –æ —Å–ø—Ä–∞–≤–∫–µ –ú–°–≠"), "–°–µ—Ä–∏—è –ù–æ–º–µ—Ä –î–∞—Ç–∞"),
        "snils": (prompt_template.format("–Ω–æ–º–µ—Ä –í–∞—à–µ–≥–æ –°–ù–ò–õ–°–∞"), "123-456-789 00"),
        "place": (prompt_template.format("–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –ª–µ—á–µ–Ω–∏—è"), "–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –ª–µ—á–µ–Ω–∏—è"),
    }
    if last_word in param_to_text_keyboard:
        text, hint, = param_to_text_keyboard[last_word]
        keyb = await identification_cancel_kb(state, hint)
        if last_word == "choice":
            keyb = certificates_kb()
        del_mes_1 = await message.answer(text=text, reply_markup=keyb)
        if not album:
            await redis.lpush(f"del_tech_{str(message.from_user.id)}", *[message.message_id])
        await redis.lpush(f"del_tech_{str(message.from_user.id)}", *[del_mes_1.message_id])


@router_m.message(flags={"throttle": "check"})
async def all_text(message: types.Message):
    await message.answer(text="‚ÑπÔ∏è *–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ*.\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é üëá",
                         reply_markup=menu_kb())
