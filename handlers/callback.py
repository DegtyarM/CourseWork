from aiogram import F, Router, flags
from aiogram.enums import ChatAction
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter, or_f
from aiogram.exceptions import TelegramBadRequest

from utils import *
from filters import ComplaintWithFile
from data.med_exam.questioniers import *
from states import Address, EditComplaint

import re
from redis.asyncio import Redis

router_cal = Router()

questions_dict = {}  # –°–ª–æ–≤–∞—Ä—å –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã
questions_list = []  # –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã
digit_answer = []  # –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –≤–æ–ø—Ä–æ—Å–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –æ—Ç–≤–µ—Ç —á–∏—Å–ª–æ–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º –≤ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö
conditional_answer = []  # –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å
answers_dict = {}  # –°–ª–æ–≤–∞—Ä—å –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–∞–π–ª


"""******************************************* –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–• –ß1 ********************************************"""


@router_cal.callback_query(F.data == "edit_file", StateFilter(Complaint.final), ComplaintWithFile())
async def can_not_edit_file(callback: types.CallbackQuery, redis: Redis):
    await callback.answer()
    del_mes_1 = await callback.message.answer(
        text="üìé *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª, –ø–æ–∫–∞ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç 590 —Å–∏–º–≤–æ–ª–æ–≤.*\n\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å "
             "–¥–æ–∫—É–º–µ–Ω—Ç, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ *590 —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –º–µ–Ω—å—à–µ*, "
             "–ø–æ—Å–ª–µ —á–µ–≥–æ –í–∞–º —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è '*–§–∞–π–ª*' –≤ —Ä–∞–∑–¥–µ–ª–µ '*–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ*'.")
    await redis.lpush(f"del_tech_{str(callback.from_user.id)}", *[del_mes_1.message_id])


"""*********************************** –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–õ–ò–ù–ò–ö–ê–• –ò –ü–†–ò–ö–†–ï–ü–õ–ï–ù–ò–ò ***********************************"""


@router_cal.callback_query(F.data == 'clinic', StateFilter(None))
async def know_clinic(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    await callback.answer()
    del_mes_1 = await callback.message.answer(
          text="üè† –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–ª–∏–Ω–∏–∫—É, –∫ –∫–æ—Ç–æ—Ä–æ–π –í—ã –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã: \n\n"
               "‚ÑπÔ∏è –ü—Ä–∏–º–µ—Ä –∞–¥—Ä–µ—Å–∞: `–°–∞–ª–∞–≤–∞—Ç–∞ –Æ–ª–∞–µ–≤–∞ 23–ê` \n\n"
               "üõ£ –ï—Å–ª–∏ –≤—ã –∂–∏–≤—ë—Ç–µ –≤ *–°–æ—Å–Ω–æ–≤—Å–∫–æ–º —Ä–∞–π–æ–Ω–µ*, –≤–≤–æ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: *¬´–ø–æ—Å—ë–ª–æ–∫, –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω, —É–ª–∏—Ü–∞¬ª* "
               "(–±–µ–∑ –Ω–æ–º–µ—Ä–∞ –¥–æ–º–∞)\n–ï—Å–ª–∏ –≤—ã –∏–∑ –ø–æ—Å—ë–ª–∫–æ–≤ *¬´–®–µ—Ä—à–Ω–∏¬ª, ¬´–¢–∞—Ä–∞—Å–æ–≤–∫–∞¬ª –∏–ª–∏ ¬´–ö–∞—Ä–ø–æ–≤ –ü—Ä—É–¥¬ª*, –≤–≤–æ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "
               "*¬´–ø–æ—Å—ë–ª–æ–∫, —É–ª–∏—Ü–∞¬ª* (–±–µ–∑ –Ω–æ–º–µ—Ä–∞ –¥–æ–º–∞)\n\n‚ùóÔ∏è*–í–∞–∂–Ω–æ: –±–æ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ñ–æ—Ä–º–∞—Ç—É!* –ù–µ —Å—Ç–∞–≤—å—Ç–µ –∑–∞–ø—è—Ç—É—é "
               "–º–µ–∂–¥—É —É–ª–∏—Ü–µ–π –∏ –Ω–æ–º–µ—Ä–æ–º –¥–æ–º–∞, –∞ –ª–∏—Ç–µ—Ä—É –∑–¥–∞–Ω–∏—è –ø–∏—à–∏—Ç–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–æ–º–µ—Ä–∞, –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞.",
          reply_markup=cancel_kb("search", "–ê–¥—Ä–µ—Å –¥–æ–º–∞"))
    await redis.lpush(f"del_mes_{str(callback.from_user.id)}", *[del_mes_1.message_id])
    await state.set_state(Address.address)


@router_cal.callback_query(F.data == "yes", flags={"throttle": "check"})
async def yes_address(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    await delete_redis_mes(callback, redis, f"del_tech_{str(callback.from_user.id)}")
    await callback.message.delete()
    await callback.message.answer(text=f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –Ω–∞—à–ª–∏ –í–∞—à –∞–¥—Ä–µ—Å "
                                       f"(`{re.search(r'\((.*?)\)', callback.message.text).group(1)}`) "
                                       f"–≤ –Ω–∞—à–µ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. \n\n"
                                       "üè• –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–æ–π—Ç–∏ –≤ –ª—é–±–æ–π —Ñ–∏–ª–∏–∞–ª –ü–æ–ª–∏–º–µ–¥–∏–∫–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π "
                                       "–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∫ –Ω–∞—à–µ–π –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏. –í–æ–∑—å–º–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å —Å–æ–±–æ–π *–ø–∞—Å–ø–æ—Ä—Ç, "
                                       "–ø–æ–ª–∏—Å –û–ú–°, –°–ù–ò–õ–°*. –ê–¥—Ä–µ—Å–∞ –∫–ª–∏–Ω–∏–∫ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ [—Å–∞–π—Ç–µ]"
                                       "(https://mnogomed.ru/chelyabinsk/contacts?ysclid=m60ip80gzi494077339#130a) "
                                       "–∏–ª–∏ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º —Ä–∞–±–æ—Ç—ã –∫–ª–∏–Ω–∏–∫ –≤—ã—à–µ.\n\n"
                                       "üìû –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–≤–æ–Ω–∏—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É +73512409977",
                                  disable_web_page_preview=True,
                                  reply_markup=menu_kb())
    await delete_redis_mes(callback, redis, f"del_mes_{str(callback.from_user.id)}")
    await state.set_state(None)


@router_cal.callback_query(F.data == "no", flags={"throttle": "check"})
async def no_address(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    await delete_redis_mes(callback, redis, f"del_tech_{str(callback.from_user.id)}")
    await callback.message.delete()
    del_mes_1 = await callback.message.answer(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞:")
    await redis.lpush(f"del_mes_{str(callback.from_user.id)}", *[del_mes_1.message_id])
    await state.set_state(Address.address)


"""************************************* –û–§–û–†–ú–õ–ï–ù–ò–ï –ñ–ê–õ–û–ë –ò –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ô **************************************"""


@router_cal.callback_query(F.data == "agree", StateFilter(Complaint.agreement), flags={"throttle": "check"})
async def agree_processing_data(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    await delete_redis_mes(callback, redis, f"del_tech_{str(callback.from_user.id)}")
    await agree_data(callback, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∂–∞–ª–æ–±—ã:", complaint_topics_ikb(), state, Complaint.topic, redis)


@router_cal.callback_query(F.data == "disagree", or_f(StateFilter(Complaint.agreement),
                                                      StateFilter(MedExam.agreement),
                                                      StateFilter(Certificates.agreement)),
                           flags={"throttle": "check"})
async def disagree_processing_data(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    await delete_redis_mes(callback, redis, f"del_tech_{str(callback.from_user.id)}")
    await callback.message.delete()
    await callback.message.answer(text="‚öñÔ∏è *–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.*\nüõéÔ∏è –í —Ç–∞–∫–æ–º "
                                       "—Å–ª—É—á–∞–µ –º—ã –Ω–µ –º–æ–∂–µ–º –æ–∫–∞–∑–∞—Ç—å –í–∞–º —É—Å–ª—É–≥—É —Å–æ–≥–ª–∞—Å–Ω–æ –¥–µ–π—Å—Ç–≤—É—é—â–µ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É.",
                                  reply_markup=menu_kb())
    await state.set_state(None)
    await delete_redis_mes(callback, redis, f"del_mes_{str(callback.from_user.id)}")


@router_cal.callback_query(F.data.contains("topic"), StateFilter(Complaint.topic), flags={"throttle": "check"})
async def make_complaint_topic(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    await delete_redis_mes(callback, redis, f"del_tech_{str(callback.from_user.id)}")
    await callback.answer()
    await state.update_data(topic=callback.message.reply_markup.inline_keyboard[int(callback.data[-1]) - 1][0].text)
    del_mes_1 = await callback.message.edit_text(
        text=f"–¢–µ–º–∞ –∂–∞–ª–æ–±—ã: *{callback.message.reply_markup.inline_keyboard
                              [int(callback.data[-1]) - 1][0].text}*\n\n"
             f"‚ùóÔ∏è *–í—Å–µ –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è*",)
    del_mes_2 = await callback.message.answer(text="–£–∫–∞–∂–∏—Ç–µ –í–∞—à–∏ –§–∞–º–∏–ª–∏—é –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏):",
                                              reply_markup=cancel_kb("create", "–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ"))
    await redis.lpush(f"del_mes_{str(callback.from_user.id)}", *[del_mes_1.message_id, del_mes_2.message_id])
    await state.set_state(Complaint.name)


@router_cal.callback_query(F.data == "no_doc", or_f(StateFilter(Complaint.file), StateFilter(EditComplaint.edit_file)))
async def make_complaint_without_file(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    await delete_redis_mes(callback, redis, f"del_tech_{str(callback.from_user.id)}")
    await callback.answer()
    remove_kb_text = {"file": "‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", "edit_file": "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!"}
    cur_state = await state.get_state()
    del_mes_1 = await callback.message.answer(text=remove_kb_text[cur_state.split(":")[-1]],
                                              reply_markup=ReplyKeyboardRemove())
    await redis.lpush(f"del_tech_{str(callback.from_user.id)}", *[del_mes_1.message_id])
    data = await state.get_data()
    if "file" in data:
        del data["file"]
    await state.set_data(data)
    await callback.message.answer(text=complaint_text(data, 2, 0),
                                  reply_markup=change_complaint_ikb())
    await state.set_state(Complaint.final)
    await delete_redis_mes(callback, redis, f"del_mes_{str(callback.from_user.id)}")


@router_cal.callback_query(F.data == "send", StateFilter(Complaint.final), flags={"throttle": "check"})
async def send_complaint(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    await delete_redis_mes(callback, redis, f"del_tech_{str(callback.from_user.id)}")
    data = await state.get_data()
    if "file" in data:
        await callback.message.edit_caption(caption=complaint_text(data, 4, 0))
        await callback.bot.send_document(chat_id=await redis.get(name="gid_complaints"),
                                         document=str(data["file"]),
                                         caption=complaint_text(data, 1, 0, "–ù–æ–≤–æ–µ"))
    else:
        await callback.message.edit_text(text=complaint_text(data, 4, 0))
        await callback.bot.send_message(chat_id=await redis.get(name="gid_complaints"),
                                        text=complaint_text(data, 1, 0, "–ù–æ–≤–æ–µ"))
    await callback.message.answer(text="üôè –°–ø–∞—Å–∏–±–æ, –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é —Å–ª—É–∂–±–æ–π –∫–∞—á–µ—Å—Ç–≤–∞! \n\n"
                                       f"‚è≥ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–ª—É–∂–±—ã –∫–∞—á–µ—Å—Ç–≤–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ "
                                       f"({str(data["number"])}) –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.",
                                  reply_markup=menu_kb())
    await state.clear()
    await delete_redis_mes(callback, redis, f"del_mes_{str(callback.from_user.id)}")
    await delete_redis_mes(callback, redis, f"del_tech_{str(callback.from_user.id)}")


@router_cal.callback_query(F.data == "cancel_send", StateFilter(Complaint.final), flags={"throttle": "check"})
async def cancel_send_complaint(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    await delete_redis_mes(callback, redis, f"del_tech_{str(callback.from_user.id)}")
    data = await state.get_data()
    if "file" in data:
        await callback.message.edit_caption(caption=complaint_text(data, 5, 0))
    else:
        await callback.message.edit_text(text=complaint_text(data, 5, 0))
    await callback.message.answer(text="üõë –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –æ–±—Ä–∞—â–µ–Ω–∏—è!",
                                  reply_markup=menu_kb())
    await state.clear()
    await delete_redis_mes(callback, redis, f"del_mes_{str(callback.from_user.id)}")
    await delete_redis_mes(callback, redis, f"del_tech_{str(callback.from_user.id)}")


"""******************************************** –ò–ó–ú–ï–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• *********************************************"""


@router_cal.callback_query(F.data == "change", StateFilter(Complaint.final), flags={"throttle": "check"})
async def change_complaint(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    await delete_redis_mes(callback, redis, f"del_tech_{str(callback.from_user.id)}")
    await callback.answer()
    data = await state.get_data()
    if callback.message.document:
        await callback.message.edit_caption(caption=complaint_text(data, 3, 0))
    else:
        await callback.message.edit_text(text=complaint_text(data, 3, 0))
    await callback.message.edit_reply_markup(reply_markup=edit_complaint_ikb())


@router_cal.callback_query(F.data.contains("edit"), StateFilter(Complaint.final))
async def changing_complaint(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    await delete_redis_mes(callback, redis, f"del_tech_{str(callback.from_user.id)}")
    p = str(callback.data[5:])
    data = await state.get_data()
    chat_id = callback.from_user.id
    old_data = ""
    if p != "file" and p != "back":
        old_data = f"\n\n*–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ*: `{str(data[p])}` (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–π –ø—Ä–∞–≤–∫–∏)"
    param_to_text_keyboard = {
        "topic": ("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É –∂–∞–ª–æ–±—ã:", complaint_topics_ikb(), ""),
        "name": ("–í–≤–µ–¥–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –§–∞–º–∏–ª–∏—é –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏):",
                 cancel_kb("edit", "–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ"), old_data),
        "birth": ("–í–≤–µ–¥–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¥–¥.–º–º.–≥–≥–≥–≥':", cancel_kb("edit", "–¥–¥.–º–º.–≥–≥–≥–≥"),
                  old_data),
        "number": ("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Å–≤—è–∑–∏, –Ω–∞—á–∏–Ω–∞—è —Å +7 –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤:",
                   cancel_kb("edit", "+7xxxxxxxxxx"), old_data),
        "complaint": ("–í–≤–µ–¥–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –∂–∞–ª–æ–±—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:", cancel_kb("edit"), old_data),
        "file": (
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç.\n\n‚ö†Ô∏è *–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã, –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ç–æ–ª—å–∫–æ 1 –¥–æ–∫—É–º–µ–Ω—Ç! –ï—Å–ª–∏ –≤—ã "
            "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ, —Ç–æ –∫ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—Å—è –ø–µ—Ä–≤—ã–π –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç.*\n\n"
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ë–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞'",
            document_no_ikb(), ""),
    }
    if p == "back":
        if "file" in data:
            await callback.message.edit_caption(caption=complaint_text(data, 2, 0))
        else:
            await callback.message.edit_text(text=complaint_text(data, 2, 0))
        await callback.message.edit_reply_markup(reply_markup=change_complaint_ikb())
    if p in param_to_text_keyboard:
        text, keyb, old_data = param_to_text_keyboard[p]
        await callback.message.delete()
        del_mes_1 = await callback.bot.send_message(chat_id=chat_id, text=text + old_data, reply_markup=keyb)
        await state.set_state(getattr(EditComplaint, callback.data))
        await redis.lpush(f"del_mes_{str(callback.from_user.id)}", *[del_mes_1.message_id])


@router_cal.callback_query(F.data.contains('topic'), StateFilter(EditComplaint.edit_topic), flags={"throttle": "check"})
async def edit_complaint_topic(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    await delete_redis_mes(callback, redis, f"del_tech_{str(callback.from_user.id)}")
    await callback.message.delete()
    await edited_complaint(callback, state, 1, redis, "topic",
                           callback.message.reply_markup.inline_keyboard[int(callback.data[-1]) - 1][0].text)
    await delete_redis_mes(callback, redis, f"del_mes_{str(callback.from_user.id)}")


"""****************************************** –ü–†–û–ô–¢–ò –î–ò–°–ü–ê–ù–°–ï–†–ò–ó–ê–¶–ò–Æ *******************************************"""


@router_cal.callback_query(F.data == "med_exam", StateFilter(None))
@flags.chat_action(action=ChatAction.UPLOAD_DOCUMENT)
async def med_exam_agreement(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    await callback.answer()
    await call_agreement(callback, redis)
    await state.set_state(MedExam.agreement)


@router_cal.callback_query(F.data == "agree", StateFilter(MedExam.agreement), flags={"throttle": "check"})
async def agree_processing_data(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    await delete_redis_mes(callback, redis, f"del_tech_{str(callback.from_user.id)}")
    await agree_data(callback, "–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¥–¥.–º–º.–≥–≥–≥–≥':",
                     cancel_kb("med_exam", "–¥–¥.–º–º.–≥–≥–≥–≥"), state, MedExam.birth, redis)


@router_cal.callback_query(F.data == "man", StateFilter(MedExam.gender), flags={"throttle": "check"})
@flags.chat_action(action=ChatAction.UPLOAD_DOCUMENT)
async def med_exam_questions(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    await delete_redis_mes(callback, redis, f"del_tech_{str(callback.from_user.id)}")
    data, age = await prep_questionnaire(callback, state, "–ú—É–∂—Å–∫–æ–π", redis)
    if age <= 30:
        await start_questionnaire(callback, state, data, "m30", "AnketaDo65", "", anketa_do_65,
                                  anketa_do_65_digit_answer, anketa_do_65_conditional_answer, redis)
    elif 30 < age <= 65:
        await start_questionnaire(callback, state, data, "<65", "AnketaDo65", "", anketa_do_65,
                                  anketa_do_65_digit_answer, anketa_do_65_conditional_answer, redis)
    elif age > 65:
        await start_questionnaire(callback, state, data, ">65", "AnketaPosle65", "", anketa_po_65,
                                  anketa_po_65_digit_answer, anketa_po_65_conditional_answer, redis)


@router_cal.callback_query(F.data == "woman", StateFilter(MedExam.gender), flags={"throttle": "check"})
@flags.chat_action(action=ChatAction.UPLOAD_DOCUMENT)
async def med_exam_questions(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    await delete_redis_mes(callback, redis, f"del_tech_{str(callback.from_user.id)}")
    data, age = await prep_questionnaire(callback, state, "–ñ–µ–Ω—Å–∫–∏–π", redis)
    if age <= 49:
        del_mes_1 = await callback.message.answer(text="–ë–µ—Ä–µ–º–µ–Ω–Ω—ã –ª–∏ –í—ã –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç?", reply_markup=questions_ikb())
        await redis.lpush(f"del_mes_{str(callback.from_user.id)}", *[del_mes_1.message_id])
        await state.set_state(MedExam.pregnant)
    elif 49 < age <= 65:
        await start_questionnaire(callback, state, data, "<65", "AnketaDo65", "", anketa_do_65,
                                  anketa_do_65_digit_answer, anketa_do_65_conditional_answer, redis)
    elif age > 65:
        await start_questionnaire(callback, state, data, ">65", "AnketaPosle65", "", anketa_po_65,
                                  anketa_po_65_digit_answer, anketa_po_65_conditional_answer, redis)


@router_cal.callback_query(StateFilter(MedExam.pregnant), flags={"throttle": "check"})
async def woman_is_pregnant(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    await delete_redis_mes(callback, redis, f"del_tech_{str(callback.from_user.id)}")
    await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
    data = await state.get_data()
    await state.set_state(MedExam.questions)
    if callback.data == "q_yes":
        await start_questionnaire(callback, state, data, "<65", "AnketaDo65", "", anketa_do_65,
                                  anketa_do_65_digit_answer, anketa_do_65_conditional_answer, redis)
        await state.update_data(pregnant=1)
    else:
        await start_questionnaire(callback, state, data, "w49", "AnketaDo65", "", anketa_do_65,
                                  anketa_do_65_digit_answer, anketa_do_65_conditional_answer, redis)


@router_cal.callback_query(F.data == "q_yes", StateFilter(MedExam.questions), flags={"throttle": "check"})
async def question_yes(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    data, msg_text, key, key_word = await write_answer_to_dict(callback, state, "y")
    if data["q_num"] + 1 == len(questions_list):
        if await finish_questionnaire(callback, state, data, key, key_word, redis, msg_text):
            return
    key_1 = questions_list[data["q_num"] + 1]
    if key_1 in digit_answer:
        await digit_question(callback, state, data, msg_text, key_word, key_1, redis)
        if key_1 == "1_9_a" or key_1 == "1_3_a":
            await state.set_state(MedExam.write_answer)
        return
    try:
        await edit_questionnaire(callback, state, data, key_word, key_1, msg_text)
    except TelegramBadRequest as e:
        await message_is_too_long(callback, state, data, answers_dict, key_word, questions_dict, key_1, e, redis)


@router_cal.callback_query(F.data == "q_no", StateFilter(MedExam.questions), flags={"throttle": "check"})
async def question_no(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    data, msg_text, key, key_word = await write_answer_to_dict(callback, state, "n")
    if await finish_questionnaire(callback, state, data, key, key_word, redis, msg_text):
        return
    key_1 = questions_list[data["q_num"]+1]
    try:
        if key_1 == "10_a":
            await skip_questions_women_med_exam(callback, state, data, key_word, redis)
            return
        if key_1 in conditional_answer:
            await state.update_data(q_num=data["q_num"] + 1)
            data = await state.get_data()
            data, key_1 = await skip_multiple_cond_q(state, data, questions_list)
            await edit_questionnaire(callback, state, data, key_word, key_1, msg_text)
            return
        if key_1 in digit_answer:
            await digit_question(callback, state, data, msg_text, key_word, key_1, redis)
            return
        await edit_questionnaire(callback, state, data, key_word, key_1, msg_text)
    except TelegramBadRequest as e:
        await message_is_too_long(callback, state, data, answers_dict, key_word, questions_dict, key_1, e, redis)


@router_cal.callback_query(F.data.startswith("frequency"), StateFilter(MedExam.questions), flags={"throttle": "check"})
async def question_frequency(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    score = callback.data.split("_")[-1]
    data, msg_text, key, key_word = await write_answer_to_dict(callback, state, "f",
                                                               score, callback.data.split("_")[-2])
    key_1 = questions_list[data["q_num"]+1]
    await state.update_data(frequency_test=data["frequency_test"] + int(score))
    try:
        await edit_questionnaire(callback, state, data, key_word, key_1, msg_text)
    except TelegramBadRequest as e:
        await message_is_too_long(callback, state, data, answers_dict, key_word, questions_dict, key_1, e, redis)


@router_cal.callback_query(F.data.startswith("level"), StateFilter(MedExam.questions), flags={"throttle": "check"})
async def question_level(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    score = callback.data.split("_")[-1]
    data, msg_text, key, key_word = await write_answer_to_dict(callback, state, "l", score)
    key_1 = questions_list[data["q_num"]+1]
    msg_text += "\n" + questions_dict[key][0] + f" (*{answers_dict[key_word]}*)\n{questions_dict[key_1][0]}"
    del_mes_1 = await callback.message.answer(text=msg_text, reply_markup=questions_dict[key_1][1])
    await state.update_data(msg_text=msg_text)
    await delete_redis_mes(callback, redis, f"del_tech_{str(callback.from_user.id)}")
    await redis.lpush(f"del_tech_{str(callback.from_user.id)}", *[del_mes_1.message_id])
    await state.update_data(q_num=data["q_num"] + 1)


@router_cal.callback_query(F.data.startswith("rating"), StateFilter(MedExam.questions), flags={"throttle": "check"})
async def question_rating(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    score = callback.data.split("_")[-1]
    data, msg_text, key, key_word = await write_answer_to_dict(callback, state, "r", score)
    if await finish_questionnaire(callback, state, data, key, key_word, redis, msg_text):
        return
    key_1 = questions_list[data["q_num"]+1]
    try:
        await edit_questionnaire(callback, state, data, key_word, key_1, msg_text)
    except TelegramBadRequest as e:
        await message_is_too_long(callback, state, data, answers_dict, key_word, questions_dict, key_1, e, redis)


@router_cal.callback_query(F.data == "no_button_q", StateFilter(MedExam.digit_answer), flags={"throttle": "check"})
async def question_no_sex(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
    data, msg_text, key, key_word = await write_answer_to_dict(callback, state, "b")
    data, key_1 = await skip_multiple_cond_q(state, data, questions_list)
    await transition_to_state_questions(callback, state, data, key_word, key_1, key, redis)


"""********************************************** –ó–ê–ö–ê–ó –°–ü–†–ê–í–û–ö ***********************************************"""


@router_cal.callback_query(F.data == "cert_start", StateFilter(Certificates.choice))
async def certificates_start(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    await callback.answer()
    await call_agreement(callback, redis)
    await state.set_state(Certificates.agreement)
    first = callback.message.text.find('"')
    certificate_type = callback.message.text[first + 1:callback.message.text.find('"', first + 1)]
    param_to_text_keyboard = {
        "–°–ø—Ä–∞–≤–∫–∞ –æ –Ω–µ–∫–æ–Ω—Ç–∞–∫—Ç–µ": "contact_name",
        "–°–ø—Ä–∞–≤–∫–∞ –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –¥–∏—Å–ø–∞–Ω—Å–µ—Ä–∏–∑–∞—Ü–∏–∏": "exam_name",
        "–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–µ–≤–∫–∏ –Ω–∞ —Å–∞–Ω–∞—Ç–æ—Ä–Ω–æ-–∫—É—Ä–æ—Ä—Ç–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ": "c70_name",
    }
    await state.update_data(cert_type=certificate_type)
    await redis.set(f"type_cert_{str(callback.from_user.id)}", param_to_text_keyboard[certificate_type])


@router_cal.callback_query(F.data == "agree", StateFilter(Certificates.agreement))
async def certificates_agree(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    cert_type = await redis.get(f"type_cert_{str(callback.from_user.id)}")
    await agree_data(callback, "–£–∫–∞–∂–∏—Ç–µ –í–∞—à–∏ –§–∞–º–∏–ª–∏—é –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏):",
                     cancel_kb("certification", "–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ"), state,
                     getattr(Certificates, cert_type.decode()), redis)
    await redis.delete(cert_type)


@router_cal.callback_query(F.data == "q_yes", StateFilter(Certificates.contact_test), flags={"throttle": "check"})
async def contact_test_yes(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    await callback.message.edit_text(text=f"{callback.message.text} "
                                          f"({await get_button_text_from_keyboard(callback, questions_ikb())}",
                                     reply_markup=None)
    await callback.message.answer(text="‚ùå *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –≤—ã–¥–∞—Ç—å –í–∞–º —Å–ø—Ä–∞–≤–∫—É –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ*.\n\n–î–ª—è "
                                       "–ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º –∫ —Ç–µ—Ä–∞–ø–µ–≤—Ç—É –≤ –í–∞—à–µ–π –∫–ª–∏–Ω–∏–∫–µ.",
                                  reply_markup=menu_kb())
    await callback.message.answer(text="‚úçÔ∏è –î–ª—è –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É —Å–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 2dr –ø–æ –æ–¥–Ω–æ–π –∏–∑ —Å—Å—ã–ª–æ–∫ –Ω–∏–∂–µ "
                                       "–∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å [—Å–∞–π—Ç–æ–º](https://74.2dr.ru/)",
                                  reply_markup=app_links_ikb(),
                                  disable_web_page_preview=True)
    await delete_redis_mes(callback, redis, f"del_mes_{str(callback.from_user.id)}")
    await delete_redis_mes(callback, redis, f"del_tech_{str(callback.from_user.id)}")
    await state.clear()


@router_cal.callback_query(F.data == "q_no", StateFilter(Certificates.contact_test), flags={"throttle": "check"})
async def contact_test_no(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    await callback.message.edit_text(text=f"{callback.message.text} "
                                          f"({await get_button_text_from_keyboard(callback, questions_ikb())})",
                                     reply_markup=None)
    questions = {
        "–í—ã–µ–∑–∂–∞–ª–∏ –ª–∏ –í—ã –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –†–§": "–ë—ã–ª –ª–∏ —É –í–∞—Å –∫–æ–Ω—Ç–∞–∫—Ç —Å –ª–∏—Ü–∞–º–∏, –≤—ã–µ–∑–∂–∞–≤—à–∏–º–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –†–§, –≤ –≥. –ú–æ—Å–∫–≤–∞, –≤ –≥. "
                                        "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 14 –¥–Ω–µ–π?",
        "–ë—ã–ª –ª–∏ —É –í–∞—Å –∫–æ–Ω—Ç–∞–∫—Ç —Å –ª–∏—Ü–∞–º–∏": "–ù–∞—Ö–æ–¥–∏—Ç–µ—Å—å –ª–∏ –≤—ã –Ω–∞ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç?",
    }
    for key, question in questions.items():
        if callback.message.text.startswith(key):
            del_mes_1 = await callback.message.answer(text=question, reply_markup=questions_ikb())
            await redis.lpush(f"del_mes_{str(callback.from_user.id)}", *[del_mes_1.message_id])
            return
    del_mes_2 = await callback.message.answer(
        text="üè† –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–ª–∏–Ω–∏–∫—É, –∫ –∫–æ—Ç–æ—Ä–æ–π –í—ã –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã: \n\n"
             "‚ÑπÔ∏è –ü—Ä–∏–º–µ—Ä –∞–¥—Ä–µ—Å–∞: `–°–∞–ª–∞–≤–∞—Ç–∞ –Æ–ª–∞–µ–≤–∞ 23–ê` \n\n"
             "üõ£ –ï—Å–ª–∏ –≤—ã –∂–∏–≤—ë—Ç–µ –≤ *–°–æ—Å–Ω–æ–≤—Å–∫–æ–º —Ä–∞–π–æ–Ω–µ*, –≤–≤–æ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: *¬´–ø–æ—Å—ë–ª–æ–∫, –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω, —É–ª–∏—Ü–∞¬ª* "
             "(–±–µ–∑ –Ω–æ–º–µ—Ä–∞ –¥–æ–º–∞)\n–ï—Å–ª–∏ –≤—ã –∏–∑ –ø–æ—Å—ë–ª–∫–æ–≤ *¬´–®–µ—Ä—à–Ω–∏¬ª, ¬´–¢–∞—Ä–∞—Å–æ–≤–∫–∞¬ª –∏–ª–∏ ¬´–ö–∞—Ä–ø–æ–≤ –ü—Ä—É–¥¬ª*, –≤–≤–æ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "
             "*¬´–ø–æ—Å—ë–ª–æ–∫, —É–ª–∏—Ü–∞¬ª* (–±–µ–∑ –Ω–æ–º–µ—Ä–∞ –¥–æ–º–∞)\n\n‚ùóÔ∏è*–í–∞–∂–Ω–æ: –±–æ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ñ–æ—Ä–º–∞—Ç—É!* –ù–µ —Å—Ç–∞–≤—å—Ç–µ –∑–∞–ø—è—Ç—É—é "
             "–º–µ–∂–¥—É —É–ª–∏—Ü–µ–π –∏ –Ω–æ–º–µ—Ä–æ–º –¥–æ–º–∞, –∞ –ª–∏—Ç–µ—Ä—É –∑–¥–∞–Ω–∏—è –ø–∏—à–∏—Ç–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–æ–º–µ—Ä–∞, –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞.",
        reply_markup=cancel_kb("certification", "–ê–¥—Ä–µ—Å –¥–æ–º–∞"))
    await redis.lpush(f"del_mes_{str(callback.from_user.id)}", *[del_mes_2.message_id])
    await delete_redis_mes(callback, redis, f"del_tech_{str(callback.from_user.id)}")
    await state.set_state(Certificates.contact_address)


@router_cal.callback_query(StateFilter(Certificates.c70_gender), flags={"throttle": "check"})
async def c70_gender(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    await state.update_data(**({"mg": "\u2713"} if callback.data == "man" else {"wg": "\u2713"}))
    del_mes_1 = await callback.message.answer(text="–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¥–¥.–º–º.–≥–≥–≥–≥':",
                                              reply_markup=cancel_kb("certification", "–¥–¥.–º–º.–≥–≥–≥–≥"))
    await callback.message.edit_text(text="–í–∞—à –ø–æ–ª: " + await get_button_text_from_keyboard(callback, gender_ikb()),
                                     reply_markup=None)
    await redis.lpush(f"del_mes_{str(callback.from_user.id)}", *[del_mes_1.message_id])
    await delete_redis_mes(callback, redis, f"del_tech_{str(callback.from_user.id)}")
    await state.set_state(Certificates.c70_birth)


@router_cal.callback_query(StateFilter(Certificates.c70_disable), flags={"throttle": "check"})
async def c70_disable_yes(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    await callback.message.edit_text(text=f"{callback.message.text} "
                                          f"({await get_button_text_from_keyboard(callback, questions_ikb())})",
                                     reply_markup=None)
    if callback.data == "q_yes":
        del_mes_1 = await callback.message.answer(text="–ö –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –í—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å?",
                                                  reply_markup=disable_group_ikb())
        await redis.lpush(f"del_mes_{str(callback.from_user.id)}", *[del_mes_1.message_id])
        await state.set_state(Certificates.c70_dis_group)
    else:
        await mse_text_message(callback, state, redis)
    await delete_redis_mes(callback, redis, f"del_tech_{str(callback.from_user.id)}")


@router_cal.callback_query(StateFilter(Certificates.c70_dis_group), flags={"throttle": "check"})
async def c70_disable_group(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    await callback.message.edit_text(text=f"–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏: "
                                          f"{await get_button_text_from_keyboard(callback, disable_group_ikb())}",
                                     reply_markup=None)
    disable_group_id = callback.data[-1]
    await state.update_data(c1="0", c2="0", c3=disable_group_id)
    if disable_group_id == "1":
        del_mes_1 = await callback.message.answer(text="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏ –í–∞–º —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ?", reply_markup=questions_ikb())
        await redis.lpush(f"del_mes_{str(callback.from_user.id)}", *[del_mes_1.message_id])
        await state.set_state(Certificates.c70_accompany)
    else:
        await mse_text_message(callback, state, redis)
    await delete_redis_mes(callback, redis, f"del_tech_{str(callback.from_user.id)}")


@router_cal.callback_query(StateFilter(Certificates.c70_accompany), flags={"throttle": "check"})
async def c70_accompany(callback: types.CallbackQuery, state: FSMContext, redis: Redis):
    await callback.message.edit_text(text=f"{callback.message.text} "
                                          f"({await get_button_text_from_keyboard(callback, questions_ikb())})",
                                     reply_markup=None)
    await state.update_data(ac="\u2713" if callback.data == "q_yes" else "\u2013")
    await mse_text_message(callback, state, redis)
    await delete_redis_mes(callback, redis, f"del_tech_{str(callback.from_user.id)}")


"""******************************************* –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–• –ß2 ********************************************"""


@router_cal.callback_query(or_f(F.data == "clinic", F.data == "med_exam", F.data == "cert_start"), ~StateFilter(None))
async def start_func_in_state(callback: types.CallbackQuery):
    func = {"clinic": "—É–∑–Ω–∞—Ç—å –∞–¥—Ä–µ—Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è", "med_exam": "–Ω–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "cert_start": "–ø–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é —Å–ø—Ä–∞–≤–∫–∏"}
    await callback.answer(text="‚ÑπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Ñ—É–Ω–∫—Ü–∏—é, –≤—ã–π–¥—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã " + func[callback.data],
                          show_alert=True)


@router_cal.callback_query(or_f(F.data.contains("topic"), F.data == "no_doc"))
async def topic_not_in_state(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)
    if F.data.contains("topic") or F.data == "no_doc":
        await callback.answer(text="‚ùå –í—ã —É–∂–µ –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è –ª–∏–±–æ –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. \n"
                                   "‚ÑπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ, –≤—ã–±—Ä–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
                              show_alert=True)


@router_cal.callback_query(or_f(F.data == "send", F.data == "change", F.data == "cancel_send",
                                F.data.contains("edit")), ~StateFilter(Complaint.final))
async def still_not_send_complaint(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.answer(text="‚ùå –í—ã —É–∂–µ –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –ª–∏–±–æ –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. \n"
                               "‚ÑπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ, –≤—ã–±—Ä–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
                          show_alert=True)


@router_cal.callback_query(or_f(F.data == "frequency_–æ–≤)_0", F.data == "frequency_)_1", F.data == "frequency_–∞)_2",
                                F.data == "frequency_–∞)_3", F.data == "frequency_–∞)_4", F.data == "level_1",
                                F.data == "level_2", F.data == "level_3", F.data == "rating_1", F.data == "rating_2",
                                F.data == "rating_3", F.data == "no_button_q"))
async def med_exam_not_in_state(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.answer(text="‚ùå –í—ã —É–∂–µ –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –¥–ª—è –¥–∏—Å–ø–∞–Ω—Å–µ—Ä–∏–∑–∞—Ü–∏–∏ –ª–∏–±–æ –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. \n"
                               "‚ÑπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ, –≤—ã–±—Ä–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
                          show_alert=True)


@router_cal.callback_query(or_f(F.data == "dg_1", F.data == "dg_2", F.data == "dg_3"))
async def certificates_not_in_state(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.answer(text="‚ùå –í—ã —É–∂–µ –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ –ª–∏–±–æ –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. \n"
                               "‚ÑπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ, –≤—ã–±—Ä–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
                          show_alert=True)


@router_cal.callback_query(or_f(F.data == "agree", F.data == "disagree", F.data == "q_yes", F.data == "q_no",
                                F.data == "man", F.data == "woman",))
async def others_not_in_state(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.answer(text="‚ùå –í—ã —É–∂–µ –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ª–∏–±–æ –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. \n"
                               "‚ÑπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ, –≤—ã–±—Ä–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
                          show_alert=True)
