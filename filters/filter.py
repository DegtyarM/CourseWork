from aiogram import types
from aiogram.filters import Filter
from aiogram.fsm.context import FSMContext

from utils import last_word_in_state, calc_age

import re
from datetime import datetime


# –°–ø–∏—Å–æ–∫ –≥–æ–¥–æ–≤, –ø–æ–¥–ª–µ–∂–∞—â–∏—Ö –¥–∏—Å–ø–∞–Ω—Å–µ—Ä–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
base_years = [1983, 1986, 1989, 1992, 1995, 1998, 2001, 2004, 2007]
med_exam_year_list = [str(year + datetime.now().year - 2025) for year in base_years]


# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∏–ø —á–∞—Ç–∞, —á—Ç–æ–±—ã –Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
class ChatTypeFilter(Filter):
    def __init__(self, chat_types: list[str]):
        self.chat_types = chat_types

    async def __call__(self, message: types.Message):
        return message.chat.type in self.chat_types


class ValidMessageText(Filter):
    key = "Is_Particular_Text_Valid"

    async def __call__(self, message: types.Message, state: FSMContext):
        last_word = await last_word_in_state(state)
        if "_" in last_word and last_word != "c70_pass_address":
            last_word = last_word.split("_")[-1]
        # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –§–ò–û –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —à–∞–±–ª–æ–Ω—É –∏ –Ω–∞ —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
        if last_word == "name":
            pattern = re.compile(
                r"^[–ê-–Ø–Å][–∞-—è—ë]+(-[–ê-–Ø–Å][–∞-—è—ë]+)? [–ê-–Ø–Å][–∞-—è—ë]+(-[–ê-–Ø–Å][–∞-—è—ë]+)?( [–ê-–Ø–Å][–∞-—è—ë]+(-[–ê-–Ø–Å][–∞-—è—ë]+)?)?$",
                re.IGNORECASE
            )
            if not pattern.fullmatch(message.text):
                return {
                    "err_text_filter": "‚ùó *–í–≤–µ–¥—ë–Ω–Ω–æ–µ –§–ò–û –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É*.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û "
                                       "*–∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π*, *–±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤*, –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ'"}
            if len(message.text) > 43:
                return {"err_text_filter": "üò¨ –£–ø—Å, –º—ã –Ω–µ –æ–∂–∏–¥–∞–ª–∏, —á—Ç–æ —É –í–∞—Å –Ω–∞—Å—Ç–æ–ª—å–∫–æ –¥–ª–∏–Ω–Ω–æ–µ –§–ò–û!\n\n"
                                           "*–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –§–ò–û, –µ—Å–ª–∏ –≤ –Ω—ë–º "
                                           "–±–æ–ª–µ–µ 43 —Å–∏–º–≤–æ–ª–æ–≤.*\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥, —Å–æ–∫—Ä–∞—Ç–∏–≤ –≤–≤–æ–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç (—ç—Ç–æ –Ω–µ –±—É–¥–µ—Ç "
                                           "—è–≤–ª—è—Ç—å—Å—è –ø—Ä–æ–±–ª–µ–º–æ–π):"}
        # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —à–∞–±–ª–æ–Ω—É, –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∞—Ç—É –∏ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç
        if last_word == "birth":
            pattern = re.compile(r"^\d{2}\.\d{2}\.\d{4}$")
            if not pattern.fullmatch(message.text):
                return {
                    "err_text_filter": "‚ùó *–í–∞—à–∞ –¥–∞—Ç–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É*.\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–¥–¥.–º–º.–≥–≥–≥–≥*"
                                       " –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: '21.01.2004'"}
            try:
                datetime.strptime(message.text, "%d.%m.%Y")
                day, month, year = map(int, message.text.split("."))
                current_year = datetime.now().year
                if year < current_year - 100 or year > current_year - 12:
                    return {"err_text_filter": "‚ùó *–î–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç* - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 12 –¥–æ 100 –ª–µ—Ç.\n"
                                               "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–¥–¥.–º–º.–≥–≥–≥–≥* –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n"
                                               "–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: '21.01.2004'"}
                return False
            except ValueError:
                return {"err_text_filter": "‚ùó *–¢–∞–∫–æ–π –¥–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.*\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "
                                           "*–¥–¥.–º–º.–≥–≥–≥–≥* –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: "
                                           "'21.01.2004'"}
        # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ —à–∞–±–ª–æ–Ω—É
        if last_word == "number":
            pattern = re.compile(r"^\+7\d{10}$")
            if not pattern.fullmatch(message.text):
                return {"err_text_filter": "‚ùó *–í–∞—à –Ω–æ–º–µ—Ä –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É*.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ "
                                           "—Ñ–æ—Ä–º–∞—Ç–µ *+7xxxxxxxxxx* –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: "
                                           "'+73512409977'"}
            if message.text == "+73512409977":
                return {
                    "err_text_filter": "üëã *–ü—Ä–∏–≤–µ—Ç –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞ –Ω–∞—Ö–æ–¥—á–∏–≤–æ—Å—Ç—å, –∞ —Ç–∞–∫ - –Ω–µ—Ç, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ "
                                       "–∫–ª–∏–Ω–∏–∫–∏ –Ω–µ –ø–æ–¥–æ–π–¥—ë—Ç*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ *+7xxxxxxxxxx* –±–µ–∑ "
                                       "–ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: '+73512409977'"}
        if last_word == "complaint":
            # –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è —Å –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º
            # –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ–±—ã –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –±—ã–ª –Ω–µ –±–æ–ª–µ–µ 590 —Å–∏–º–≤–æ–ª–æ–≤
            data = await state.get_data()
            if "file" in data:
                if len(message.text) > 590:
                    return {"err_text_filter": "üìé *–ö –æ–±—Ä–∞—â–µ–Ω–∏—é –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –¥–æ–∫—É–º–µ–Ω—Ç, –ø–æ—ç—Ç–æ–º—É —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–µ–Ω"
                                               " –ø—Ä–µ–≤—ã—à–∞—Ç—å 590 —Å–∏–º–≤–æ–ª–æ–≤.*\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–æ–≤–æ–º —Ç–µ–∫—Å—Ç–µ: "
                                               f"{len(message.text)}\n\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –≤–≤–æ–¥–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ,"
                                               f" –æ—Ç–∫—Ä–µ–ø–∏–≤ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ *¬´–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ¬ª ‚Üí ¬´–§–∞–π–ª¬ª*, –∞ –∑–∞—Ç–µ–º "
                                               f"–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è."}
            # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–æ–ª—å—à–µ –ª–∏ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è, —á–µ–º 3600 —Å–∏–º–≤–æ–ª–æ–≤
            if len(message.text) > 3600:
                return {"err_text_filter": "‚ö†Ô∏è *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è - 3600 —Å–∏–º–≤–æ–ª–æ–≤.*\n\n"
                                           f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: {len(message.text)}.\n\n"
                                           f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥, —Å–æ–∫—Ä–∞—Ç–∏–≤ —Ç–µ–∫—Å—Ç:"}
        # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≥–æ–¥–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —à–∞–±–ª–æ–Ω—É, –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∞—Ç—É –∏ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç
        if last_word == "year":
            pattern = re.compile(r"^\d{4}$")
            if not pattern.fullmatch(message.text):
                return {
                    "err_text_filter": "‚ùó *–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É.*\n\n–í–≤–µ–¥–∏—Ç–µ *—Ç–æ–ª—å–∫–æ 4 —Ü–∏—Ñ—Ä—ã –≥–æ–¥–∞,"
                                       " –±–µ–∑ —Ç–æ—á–µ–∫ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤*.\n–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: '2004'"
                }
            try:
                year = int(message.text)
                current_year = datetime.now().year
                if year < current_year - 100:
                    return {
                        "err_text_filter": "‚ùó *–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è.*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ "
                                           "—Ä–æ–∂–¥–µ–Ω–∏—è - *–Ω–µ —Å—Ç–∞—Ä—à–µ 100 –ª–µ—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ*.\n–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: '1960'"
                    }
                return False
            except ValueError:
                return {
                    "err_text_filter": "*–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–¥–∞.*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ - "
                                       "–ø—Ä–∏–º–µ—Ä: '2004'"
                }
        # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–∞—Å–ø–æ—Ä—Ç—É
        if last_word == "c70_pass_address":
            pattern = re.compile(
                r'^(?:[–ê-–Ø–∞-—è—ë–Å\s\-]+\s(–æ–±–ª\.|–∫—Ä–∞–π|—Ä–µ—Å–ø\.))?,?\s*'  # –†–µ–≥–∏–æ–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
                r'(–≥\.|–ø–≥—Ç\.|—Å\.)\s?[–ê-–Ø–∞-—è—ë–Å\s\-]+,?\s*'  # –ù–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç
                r'(—É–ª\.|–ø—Ä-—Ç|–ø–µ—Ä\.|–Ω–∞–±\.|–±-—Ä|—à\.)\s?[–ê-–Ø–∞-—è—ë–Å\s\-]+,?\s*'  # –£–ª–∏—Ü–∞
                r'–¥\.\s?\d+[–ê-–Ø–∞-—è]?,?\s*'  # –î–æ–º
                r'(–∫–≤\.\s?\d+)?$'  # –ö–≤–∞—Ä—Ç–∏—Ä–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞)
            )
            if not pattern.fullmatch(message.text.strip()):
                return {
                    "err_text_filter":
                        "‚ùóÔ∏è *–ê–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É.*\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ—á–Ω–æ —Ç–∞–∫, –∫–∞–∫ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ. \n–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: "
                        "'–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª., –≥. –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10, –∫–≤. 5'\n\n"
                        "‚ùóÔ∏è –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è ('–≥.', '—É–ª.', '–¥.', '–∫–≤.'), –∑–∞–ø—è—Ç—ã–µ –∏ –ø—Ä–æ–±–µ–ª—ã!"
                }
        # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–º–µ—Ä –ø–æ–ª–∏—Å–∞ –û–ú–° –Ω–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç—É
        if last_word == "polis":
            pattern = re.compile(r"^\d{16}$")
            if not pattern.fullmatch(message.text.strip()):
                return {
                    "err_text_filter": "‚ùóÔ∏è *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –ø–æ–ª–∏—Å–∞.*\n\n–í–≤–µ–¥–∏—Ç–µ *16 —Ü–∏—Ñ—Ä –ø–æ–¥—Ä—è–¥ - –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏"
                                       " –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤*.\n–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: '1234567890123456'"
                }
        # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–ø—Ä–∞–≤–∫–µ –ú–°–≠ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç –∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤—ã–¥–∞—á–∏
        if last_word == "mse":
            pattern = re.compile(r"(?i)^–º—Å—ç-\d{4}\s+\d+\s+\d{2}\.\d{2}\.\d{4}$")
            if not pattern.fullmatch(message.text.strip()):
                return {
                    "err_text_filter": "‚ùóÔ∏è *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–ø—Ä–∞–≤–∫–∏ –ú–°–≠.*\n\n"
                                       "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏:\n"
                                       "‚Ä¢ —Å–µ—Ä–∏—é (–ú–°–≠-2006)\n"
                                       "‚Ä¢ –Ω–æ–º–µ—Ä (0005220136)\n"
                                       "‚Ä¢ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ (22.05.2007)\n\n"
                                       "–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: '*–ú–°–≠-2006 0005220136 22.05.2007*'"
                }
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã (–ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫–∏)
            try:
                date_str = message.text.strip().split()[-1]
                datetime.strptime(date_str, "%d.%m.%Y")
                return False  # –≤—Å—ë –æ–∫
            except ValueError:
                return {
                    "err_text_filter": "‚ùó *–¢–∞–∫–æ–π –¥–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ —Å–ø—Ä–∞–≤–∫–∏"
                                       " –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–¥–¥.–º–º.–≥–≥–≥–≥*."
                }
        if last_word == "snils":
            pattern = re.compile(r"^\d{3}-\d{3}-\d{3}\s+\d{2}$")
            if not pattern.fullmatch(message.text.strip()):
                return {
                    "err_text_filter": "‚ùó *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –°–ù–ò–õ–°.*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ '123-456-789 00':"
                }
        return False


class ComplaintWithFile(Filter):
    key = "Is_Less_Than_600"

    async def __call__(self, message: types.Message, state: FSMContext):
        data = await state.get_data()
        # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∫ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é
        if "complaint" in data:
            complaint_text = data.get("complaint", "")
            if len(complaint_text) > 590:
                return True
            return False
        # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –≤—ã–¥–∞–≤–∞—Ç—å —É–∂–µ –≥–æ—Ç–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
        if message.text:
            if len(message.text) > 590:
                return True
        return False


# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ —á–µ–ª–æ–≤–µ–∫ —Å –¥–∞–Ω–Ω—ã–º –≥–æ–¥–æ–º —Ä–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–π—Ç–∏ –¥–∏—Å–ø–∞–Ω—Å–µ—Ä–∏–∑–∞—Ü–∏—é
class MedExamYearValid(Filter):
    key = "Is_Year_In_List"

    async def __call__(self, message: types.Message):
        age = calc_age(message.text)
        if age < 40:
            if message.text[6:] not in med_exam_year_list or age < 18:
                return False
        return True


# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–º –¥–ª—è –∑–∞–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏
class ContactCertificateYearValid(Filter):
    key = "Is_Year_Valid"

    async def __call__(self, message: types.Message):
        year = int(message.text)
        current_year = datetime.now().year
        if year > current_year - 18:
            return False
        return True


# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å–ª–æ–º
class DigitMessage(Filter):
    key = "Is_Message_Digit"

    async def __call__(self, message: types.Message):
        if message.text is None:
            return True
        if not message.text.isdigit():
            return False
        return True
