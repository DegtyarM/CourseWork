from aiogram import types
from aiogram.types import ReplyKeyboardRemove, InputMediaDocument
from aiogram.utils.chat_action import ChatActionSender

from data.addresses import address_dict
from states import Complaint, MedExam, Certificates
from data.med_exam.questioniers import *

import os
from datetime import datetime
from pathlib import Path
from redis.asyncio import Redis


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª–∏–Ω–∏–∫–∏, —É—á–∞—Å—Ç–∫–∞ –∏ –≤—Ä–∞—á–∞ –ø–æ –∞–¥—Ä–µ—Å—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è address_dict
def find_clinic_by_address(user_address, goal_of_usage: str = None):
    for street, data in address_dict.items():
        for section, section_data in data["–£—á–∞—Å—Ç–∫–∏"].items():
            # –ò—â–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å —Å—Ä–µ–¥–∏ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞
            if user_address.lower() in section_data["–ê–¥—Ä–µ—Å–∞"]:
                coordinates = data.get("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", None)
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                if section == 23:
                    section = "–í–∑—Ä–æ—Å–ª—ã–π 23"
                if goal_of_usage == "certificate":
                    street_to_group_key = {
                        "–ö–∞—à–∏—Ä–∏–Ω—ã—Ö": "gid_Kashirinykh", "–¢–∞—Ç–∏—â–µ–≤–∞": "gid_Tatishcheva",
                        "–ü–æ–ª—è–Ω–∫–∞": "gid_Polyanka", "–ö–æ—Ä–æ–ª–µ–≤–∞": "gid_Korolova",
                        "–ó–∞–≤–æ–¥—Å–∫–∞—è": "gid_Zavodskaya", "–ü–æ–±–µ–¥—ã": "gid_Pobedy",
                        "–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è": "gid_Privilegiya",
                    }
                    group_key = None
                    for keyword, key in street_to_group_key.items():
                        if keyword.lower() in street.lower():
                            group_key = key
                            break
                    return (f"ü´¥ –ó–∞–±—Ä–∞—Ç—å –≥–æ—Ç–æ–≤—É—é —Å–ø—Ä–∞–≤–∫—É –í—ã –º–æ–∂–µ—Ç–µ –≤ –∫–ª–∏–Ω–∏–∫–µ –ø–æ –∞–¥—Ä–µ—Å—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è: *{street}*",
                            group_key, coordinates)
                return (f"üè† –í–∞—à –∞–¥—Ä–µ—Å: *{user_address}*;\n"
                        f"üè• –í—ã –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫ –∫–ª–∏–Ω–∏–∫–µ –ø–æ –∞–¥—Ä–µ—Å—É: *{street}*;\n"
                        f"#‚É£ –¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏–π —É—á–∞—Å—Ç–æ–∫: *{section}*;\n"
                        f"üë§ –¢–µ—Ä–∞–ø–µ–≤—Ç: *{section_data['–§–ò–û –≤—Ä–∞—á–∞']}*", None, coordinates)

    return f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤–≤–µ–ª–∏ –∞–¥—Ä–µ—Å (*{user_address}*) –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ?", None, None


# –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤–Ω—É—Ç—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è
def complaint_text(data, version, edited, new: str = None):
    edition = "–æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ " if edited else ""
    if not new:
        new = "–í–∞—à–µ"
    age = calc_age(str(data["birth"]))
    complaint = (f"{new} {edition}–æ–±—Ä–∞—â–µ–Ω–∏–µ:\n\n‚ÑπÔ∏è –¢–µ–º–∞ –∂–∞–ª–æ–±—ã: *{str(data["topic"])}*\n\nüë§ –§–ò–û: *{str(data["name"])}*"
                 f"\nüìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: *{str(data["birth"])}* ({age} {get_age_suffix(age)})\nüì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: "
                 f"*{str(data["number"])}*\n\nüìÑ –¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è: *{str(data["complaint"])}*")
    additions = {
        2: ("\n\n\n‚ÄºÔ∏è *–ï—Å–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤–µ—Ä–Ω–æ, —Ç–æ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!*"
            "\n–í –∏–Ω–æ–º —Å–ª—É—á–∞–µ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ. "
            "\n\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –≤–Ω–∏–∑—É."),
        3: "\n\n\n*–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?*",
        4: "\n\n*–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!*",
        5: "\n\n*–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!*",
    }
    return complaint + additions.get(version, "")


# –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
def calc_age(birth: str):
    birth_date = datetime.strptime(birth, "%d.%m.%Y")
    today = datetime.today()
    age = today.year - birth_date.year
    # –ï—Å–ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —ç—Ç–æ–º –≥–æ–¥—É —É–∂–µ –ø—Ä–æ—à–µ–ª, —Ç–æ –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ –Ω—É–∂–Ω–æ —É–º–µ–Ω—å—à–∞—Ç—å
    if today.month < birth_date.month or (today.month == birth_date.month and today.day < birth_date.day):
        age -= 1
    return age


# –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—É—Ñ—Ñ–∏–∫—Å–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞
def get_age_suffix(age: int):
    last_digit = age % 10
    last_two_digits = age % 100
    if last_two_digits in [11, 12, 13, 14]:
        return "–ª–µ—Ç"
    elif last_digit == 1:
        return "–≥–æ–¥"
    elif last_digit in [2, 3, 4]:
        return "–≥–æ–¥–∞"
    else:
        return "–ª–µ—Ç"


# –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—É—Ñ—Ñ–∏–∫—Å–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –¥–Ω—è
def get_day_suffix(days: int):
    last_digit = days % 10
    last_two_digits = days % 100
    if last_two_digits in [11, 12, 13, 14]:
        return "–¥–Ω–µ–π"
    elif last_digit == 1:
        return "–¥–µ–Ω—å"
    elif last_digit in [2, 3, 4]:
        return "–¥–Ω—è"
    else:
        return "–¥–Ω–µ–π"


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∞—è —Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ/–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
async def edited_complaint(message, state, edited, redis, key: str = None, value=None):
    if key:
        await state.update_data({key: value})
        del_mes_1 = await message.bot.send_message(chat_id=message.from_user.id,
                                                   text="‚úÖ *–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!*",
                                                   reply_markup=ReplyKeyboardRemove())
        await redis.lpush(f"del_tech_{str(message.from_user.id)}", *[del_mes_1.message_id])
    data = await state.get_data()
    if "file" in data:
        await message.bot.send_document(chat_id=message.from_user.id,
                                        document=str(data["file"]),
                                        caption=complaint_text(data, 2, edited),
                                        parse_mode="markdown",
                                        reply_markup=change_complaint_ikb())
    else:
        await message.bot.send_message(chat_id=message.from_user.id,
                                       text=complaint_text(data, 2, edited),
                                       parse_mode="markdown",
                                       reply_markup=change_complaint_ikb())
    await state.set_state(Complaint.final)


# –ú–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ Redis
async def delete_redis_mes(message, redis, redis_key):
    if await redis.exists(redis_key):
        try:
            message_ids = [int(i) for i in await redis.lrange(redis_key, 0, -1)]
            await message.bot.delete_messages(chat_id=message.from_user.id, message_ids=message_ids)
        except Exception as e:
            print(e)
        finally:
            await redis.delete(redis_key)


# –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –µ–≥–æ —Å–ª–æ–≤–∞) –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
async def last_word_in_state(state):
    str_state = await state.get_state()
    last_word = str_state.split(':')[-1]
    if str_state.startswith("Edit"):
        last_word = last_word.split("_")[-1]
    return last_word


# –ú–µ—Ç–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–µ–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
async def call_agreement(message, redis):
    del_mes_1 = await message.bot.send_document(chat_id=message.from_user.id,
                                                document=types.FSInputFile(Path("data/–°–æ–≥–ª–∞—Å–∏–µ_–Ω–∞_–æ–±—Ä–∞–±–æ—Ç–∫—É.pdf")),
                                                caption="‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å "
                                                        "–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –°–æ–≥–ª–∞—Å–∏–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:",
                                                reply_markup=agreement_ikb())
    await redis.lpush(f"del_mes_{str(message.from_user.id)}", *[del_mes_1.message_id])


# –§—É–Ω–∫—Ü–∏—è, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
async def agree_data(callback, text, reply_markup, state, set_state, redis):
    await callback.answer()
    await callback.message.edit_caption(caption="*–í—ã –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ –ø—Ä–∏–Ω—è–ª–∏ –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ "
                                                "–æ–±—Ä–∞–±–æ—Ç–∫—É –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.*")
    del_mes_1 = await callback.message.answer(text=text,
                                              reply_markup=reply_markup)
    await redis.lpush(f"del_mes_{str(callback.from_user.id)}", *[del_mes_1.message_id])
    await state.set_state(set_state)


# –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω—É–∂–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–º–µ–Ω—ã
async def identification_cancel_kb(state, hint=None):
    str_state = await state.get_state()
    keyb = cancel_kb("create", hint)
    if str_state.startswith("Edit"):
        keyb = cancel_kb("edit", hint)
    if str_state.startswith("Med"):
        keyb = None
    if str_state.startswith("Certificates"):
        keyb = cancel_kb("certification", hint)
    return keyb


# –§—É–Ω–∫—Ü–∏—è, –ø—Ä–∏–∫—Ä–µ–ø–ª—è—é—â–∞—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–∞—á–∫–∞
async def pinned_first_doc(message, album, redis):
    first = album[0]
    del_mes_1 = await message.answer(text="–ö –æ–±—Ä–∞—â–µ–Ω–∏—é –¥–æ–±–∞–≤–ª–µ–Ω –ø–µ—Ä–≤—ã–π –∏–∑ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!")
    await redis.lpush(f"del_tech_{str(message.from_user.id)}", *[del_mes_1.message_id])
    return first


# –§—É–Ω–∫—Ü–∏—è, –ø–æ–ª—É—á–∞—é—â–∞—è —Ç–µ–∫—Å—Ç —Å –Ω–∞–∂–∞—Ç–æ–π inline –∫–Ω–æ–ø–∫–∏
async def get_button_text_from_keyboard(callback: types.CallbackQuery, keyboa: InlineKeyboardMarkup):
    for row in keyboa.inline_keyboard:  # inline_keyboard - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (—Ä—è–¥–æ–≤) –∫–Ω–æ–ø–æ–∫
        for button in row:
            if callback.data == button.callback_data:
                return button.text
    return None


# –§—É–Ω–∫—Ü–∏—è, –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é—â–∞—è –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∞–Ω–∫–µ—Ç
async def prep_questionnaire(callback, state, gender: str, redis):
    from .docx_pdf import convert_docx_to_pdf
    await callback.answer()
    await state.update_data(gender=gender)
    data = await state.get_data()
    await state.set_state(MedExam.questions)
    age = calc_age(str(data["birth"]))
    await state.update_data(age=age, current_date=datetime.now().strftime("%d.%m.%Y"), q_num=0, frequency_test=0,
                            pregnant=0)
    notification = await callback.message.answer(text="–ó–∞–≥—Ä—É–∑–∫–∞...")
    del_mes_1 = await callback.bot.send_document(
        chat_id=callback.from_user.id,
        document=types.FSInputFile(convert_docx_to_pdf(
            "med_exam/AgreementMedExam", data,
            f"med_exam/completed_q/–°–æ–≥–ª–∞—Å–∏–µ_{"_".join(data['name'].split()[:2])}")),
        caption="üëÜ *–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Å–æ–≥–ª–∞—Å–∏–µ–º –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –¥–∏—Å–ø–∞–Ω—Å–µ—Ä–∏–∑–∞—Ü–∏–∏* üëÜ")
    await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=notification.message_id)
    await redis.lpush(f"del_mes_{str(callback.from_user.id)}", *[del_mes_1.message_id])
    # –ê–Ω–∞–ª–æ–≥ os.remove()
    Path(f"data/med_exam/completed_q/–°–æ–≥–ª–∞—Å–∏–µ_{'_'.join(data['name'].split()[:2])}.pdf").unlink()
    return data, age


# –§—É–Ω–∫—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏ –Ω–∞—á–∞–ª–∞ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def start_questionnaire(callback, state, data, msg_text: str, questionnaire: str, prefix: str, questions: dict,
                              digit_answers: list, conditional_answers: list, redis: Redis):
    from handlers import questions_dict, questions_list, digit_answer, conditional_answer
    common_note = ("\n\nüì§ *–ê–Ω–∫–µ—Ç—ã –±—É–¥—É—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∫–ª–∏–Ω–∏–∫—É.*\n"
                   "üîÑ –ï—Å–ª–∏ –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –∏–ª–∏ –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ –±–æ—Ç –Ω–µ–≤–µ—Ä–Ω–æ –∑–∞–ø–∏—Å–∞–ª –æ—Ç–≤–µ—Ç, –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ "
                   "–æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
                   "\n\n‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: *{time} –º–∏–Ω—É—Ç*\n"
                   "üìå –í—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å, –µ—Å–ª–∏ –Ω–µ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ."
                   "\n\n‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–µ—à–∏—Ç–µ! –ï—Å–ª–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ "
                   "–ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n\n"
                   "üìù *–ñ–µ–ª–∞–µ–º –≤–∞–º —É—Å–ø–µ—à–Ω–æ–≥–æ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!*")
    param_to_text_keyboard = {
        "m30": "‚úÖ *–û—Ç–ª–∏—á–Ω–æ!* –í–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–≤–µ –∞–Ω–∫–µ—Ç—ã:\n"
               "‚Ä¢ '*–ê–Ω–∫–µ—Ç–∞ –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω –≤ –≤–æ–∑—Ä–∞—Å—Ç–µ –¥–æ 65 –ª–µ—Ç*';\n"
               "‚Ä¢ '*–ê–Ω–∞–º–Ω–µ—Å—Ç–∏—á–µ—Å–∫–∞—è –∞–Ω–∫–µ—Ç–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π —Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ "
               "–∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è –º—É–∂—á–∏–Ω 18 - 49 –ª–µ—Ç*'."
               + common_note.format(time=10),
        "w49": "‚úÖ *–û—Ç–ª–∏—á–Ω–æ!* –í–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–≤–µ –∞–Ω–∫–µ—Ç—ã:\n"
               "‚Ä¢ '*–ê–Ω–∫–µ—Ç–∞ –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω –≤ –≤–æ–∑—Ä–∞—Å—Ç–µ –¥–æ 65 –ª–µ—Ç*';\n"
               "‚Ä¢ '*–ê–Ω–∞–º–Ω–µ—Å—Ç–∏—á–µ—Å–∫–∞—è –∞–Ω–∫–µ—Ç–∞ –¥–ª—è –∂–µ–Ω—â–∏–Ω 18-49 –ª–µ—Ç*'."
               + common_note.format(time=15),
        "<65": "‚úÖ *–û—Ç–ª–∏—á–Ω–æ!* –í–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –∑–∞–ø–æ–ª–Ω–∏—Ç—å –æ–¥–Ω—É –∞–Ω–∫–µ—Ç—É:\n"
               "‚Ä¢ '*–ê–Ω–∫–µ—Ç–∞ –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω –≤ –≤–æ–∑—Ä–∞—Å—Ç–µ –¥–æ 65 –ª–µ—Ç*'."
               + common_note.format(time=10),
        ">65": "‚úÖ *–û—Ç–ª–∏—á–Ω–æ!* –í–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –∑–∞–ø–æ–ª–Ω–∏—Ç—å –æ–¥–Ω—É –∞–Ω–∫–µ—Ç—É:\n"
               "‚Ä¢ '*–ê–Ω–∫–µ—Ç–∞ –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω –≤ –≤–æ–∑—Ä–∞—Å—Ç–µ 65 –ª–µ—Ç –∏ —Å—Ç–∞—Ä—à–µ*'."
               + common_note.format(time=10),
        "seq": "‚úÖ *–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!*\n\n–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥—ë–º –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é *–≤—Ç–æ—Ä–æ–π –∞–Ω–∫–µ—Ç—ã*."
    }
    msg_text = param_to_text_keyboard[msg_text]
    del_mes_1 = await callback.message.answer(text=msg_text, reply_markup=cancel_kb("med_exam"))
    await redis.lpush(f"del_mes_{str(callback.from_user.id)}", *[del_mes_1.message_id])
    await state.update_data(template_path="med_exam/" + questionnaire)
    await state.update_data(output_doc_path=f"med_exam/completed_q/–ê–Ω–∫–µ—Ç–∞_{prefix}"
                                            f"{"_".join(data['name'].split()[:2])}_"
                                            f"{datetime.now().strftime("%H%M%S")}")
    questions_dict.update(questions)
    if questionnaire == "AnketaDo65" or questionnaire == "AnketaPosle65":
        questions_dict.update(covid_questi)
    questions_list.extend(questions_dict.keys())
    digit_answer.extend(digit_answers)
    conditional_answer.extend(conditional_answers)
    if prefix != "–¥–ª—è_–∂–µ–Ω—â–∏–Ω_":
        del_mes_2 = await callback.bot.send_message(chat_id=callback.from_user.id,
                                                    text=questions_dict["1_1"][0],
                                                    reply_markup=questions_ikb())
        await redis.lpush(f"del_tech_{str(callback.from_user.id)}", *[del_mes_2.message_id])
        await state.update_data(msg_text=questions_dict["1_1"][0])


# –§—É–Ω–∫—Ü–∏—è, –ø—Ä–æ–≤–µ—Ä—è—é—â–∞—è –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∏ –Ω–∞—á–∏–Ω–∞—é—â–∞—è –≤—Ç–æ—Ä—É—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ—Ç–æ–≤—ã–µ
async def finish_questionnaire(callback, state, data, key, key_word, redis, msg_text=None):
    from handlers import questions_dict, questions_list, digit_answer, conditional_answer, answers_dict
    from .docx_pdf import convert_docx_to_pdf
    user_text = ("\n\nüì® *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –ü–æ–ª–∏–º–µ–¥–∏–∫—É.*\nüìû –í —Ç–µ—á–µ–Ω–∏–µ 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä "
                 f"–¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –¥–∏—Å–ø–∞–Ω—Å–µ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É, —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ä–∞–Ω–µ–µ: *{data["number"]}*"
                 f"\n\nüñ®Ô∏è –í—ã –º–æ–∂–µ—Ç–µ:\n‚Ä¢ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å —Ñ–∞–π–ª(—ã) —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ,\n‚Ä¢ –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —Ä–∞—Å–ø–µ—á–∞—Ç–∫—É –≤ –∫–ª–∏–Ω–∏–∫–µ.")
    group_text = (f"üëÜ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–∏—Å–ø–∞–Ω—Å–µ—Ä–∏–∑–∞—Ü–∏—é! üëÜ\n\n–î–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: *{data["current_date"]}\n*–§–ò–û "
                  f"–ø–∞—Ü–∏–µ–Ω—Ç–∞: *{data["name"]}*\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: *{data["number"]}*")
    if key == "c_1" or data["q_num"] + 1 == len(questions_list):
        if msg_text is not None:
            await callback.message.edit_text(text=msg_text + f" (*{answers_dict[key_word]}*)",
                                             reply_markup=None)
        answers_dict.update(data)
        notification = await callback.bot.send_message(chat_id=callback.from_user.id,
                                                       text="–ó–∞–ø–æ–ª–Ω—è—é –¥–æ–∫—É–º–µ–Ω—Ç...",
                                                       reply_markup=ReplyKeyboardRemove())
        pdf_path = convert_docx_to_pdf(str(data["template_path"]), answers_dict, str(data["output_doc_path"]))
        one_completed_questionnaire = str(data["output_doc_path"])
        await callback.bot.delete_message(chat_id=callback.from_user.id,
                                          message_id=notification.message_id)
        for struct in [answers_dict, questions_dict, questions_list, digit_answer, conditional_answer]:
            struct.clear()
        if ((data["gender"] == "–ñ–µ–Ω—Å–∫–∏–π" and data["age"] > 49) or (data["gender"] == "–ú—É–∂—Å–∫–æ–π" and data["age"] > 30)
                or (data["gender"] == "–ñ–µ–Ω—Å–∫–∏–π" and data["age"] <= 49 and data["pregnant"])):
            async with ChatActionSender.upload_document(
                    bot=callback.bot,
                    chat_id=callback.chat.id if isinstance(callback, types.Message) else callback.message.chat.id):
                await callback.bot.send_document(chat_id=callback.from_user.id,
                                                 document=types.FSInputFile(pdf_path),
                                                 caption="‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É!" + user_text,
                                                 message_effect_id="5046509860389126442",
                                                 reply_markup=menu_kb())
                await callback.bot.send_document(chat_id=await redis.get(name="gid_med_exam"),
                                                 document=types.FSInputFile(pdf_path),
                                                 caption=group_text)
                await state.clear()
                os.remove(pdf_path)
            await delete_redis_mes(callback, redis, f"del_mes_{str(callback.from_user.id)}")
            await delete_redis_mes(callback, redis, f"del_tech_{str(callback.from_user.id)}")
            return True
        if data["gender"] == "–ñ–µ–Ω—Å–∫–∏–π" and data["age"] <= 49:
            if await sent_questionnaire(callback, state, data, await redis.get(name="gid_med_exam"),
                                        "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—ã!" + user_text,
                                        group_text, prefix="–¥–ª—è_–∂–µ–Ω—â–∏–Ω_", redis=redis):
                return True
            await start_questionnaire(callback, state, data, "seq", "AnketaWoman", "–¥–ª—è_–∂–µ–Ω—â–∏–Ω_",
                                      anketa_woman, anketa_woman_digit_answer, anketa_woman_conditional_answer, redis)
            del_mes_1 = await callback.bot.send_message(chat_id=callback.from_user.id,
                                                        text=questions_dict["1"][1],
                                                        reply_markup=questions_dict["1"][2])
            await redis.lpush(f"del_tech_{str(callback.from_user.id)}", *[del_mes_1.message_id])
            await state.update_data(msg_text="")
            await state.set_state(MedExam.digit_answer)
            await state.update_data(q_num=0)
            await state.update_data(one_completed_questionnaire=one_completed_questionnaire)
        if data["gender"] == "–ú—É–∂—Å–∫–æ–π" and data["age"] <= 30:
            if await sent_questionnaire(callback, state, data, await redis.get(name="gid_med_exam"),
                                        "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—ã!" + user_text,
                                        group_text, prefix="–¥–ª—è_–º—É–∂—á–∏–Ω_", redis=redis):
                return True
            await start_questionnaire(callback, state, data, "seq", "AnketaMan", "–¥–ª—è_–º—É–∂—á–∏–Ω_",
                                      anketa_rep_m, anketa_rep_m_digit_answer, [], redis)
            await state.update_data(q_num=0)
            await state.update_data(one_completed_questionnaire=one_completed_questionnaire)
        return True
    return False


# –§—É–Ω–∫—Ü–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∞—è –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤ –≥—Ä—É–ø–ø—É
async def sent_questionnaire(callback, state, data, group_id, user_text, group_text, prefix, redis):
    required_files = []
    for filename in Path("data/med_exam/completed_q").iterdir():
        if (filename.name.startswith(f"–ê–Ω–∫–µ—Ç–∞_{prefix}{'_'.join(data['name'].split()[:2])}") or
                filename.name.startswith(f"–ê–Ω–∫–µ—Ç–∞_{'_'.join(data['name'].split()[:2])}")):
            required_files.append(filename)
        if len(required_files) == 2:
            async with ChatActionSender.upload_document(
                    bot=callback.bot,
                    chat_id=callback.chat.id if isinstance(callback, types.Message) else callback.message.chat.id):
                await callback.bot.send_media_group(chat_id=callback.from_user.id,
                                                    media=[
                                                        InputMediaDocument(media=types.FSInputFile(required_files[0])),
                                                        InputMediaDocument(media=types.FSInputFile(required_files[1]))])
                await callback.bot.send_message(chat_id=callback.from_user.id,
                                                text=user_text,
                                                reply_markup=menu_kb(),
                                                message_effect_id="5046509860389126442")
            await callback.bot.send_media_group(chat_id=group_id,
                                                media=[InputMediaDocument(media=types.FSInputFile(required_files[0])),
                                                       InputMediaDocument(media=types.FSInputFile(required_files[1]))])
            await callback.bot.send_message(chat_id=group_id,
                                            text=group_text)
            await state.clear()
            for file in required_files:
                os.remove(file)
            required_files.clear()
            await delete_redis_mes(callback, redis, f"del_tech_{str(callback.from_user.id)}")
            await delete_redis_mes(callback, redis, f"del_mes_{str(callback.from_user.id)}")
            return True
    return False


# –§—É–Ω–∫—Ü–∏—è, –ø—Ä–∏—Å—ã–ª–∞—é—â–∞—è –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞
async def digit_question(callback, state, data, msg_text, key_word, key_1, redis):
    from handlers import answers_dict, questions_dict
    await callback.message.edit_text(text=msg_text + f" (*{answers_dict[key_word]}*)", reply_markup=None)
    await state.update_data(msg_text=msg_text + f" (*{answers_dict[key_word]}*)")
    del_mes_1 = await callback.bot.send_message(chat_id=callback.from_user.id,
                                                text=questions_dict[key_1][1],
                                                reply_markup=questions_dict[key_1][2])
    await redis.lpush(f"del_tech_{str(callback.from_user.id)}", *[del_mes_1.message_id])
    await state.update_data(q_num=data["q_num"] + 1)
    await state.set_state(MedExam.digit_answer)


# –§—É–Ω–∫—Ü–∏—è, –¥–æ–ø–æ–ª–Ω—è—é—â–∞—è –∞–Ω–∫–µ—Ç—ã —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
async def edit_questionnaire(callback, state, data, key_word, key_1, msg_text=""):
    from handlers import answers_dict, questions_dict
    await callback.message.edit_text(text=msg_text + f" (*{answers_dict[key_word]}*)\n*{questions_dict[key_1][0]}*",
                                     reply_markup=questions_dict[key_1][1])
    await state.update_data(msg_text=msg_text + f" (*{answers_dict[key_word]}*)\n{questions_dict[key_1][0]}")
    await state.update_data(q_num=data["q_num"] + 1)


# –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–Ω–æ–ø–æ—á–Ω—ã–º –æ—Ç–≤–µ—Ç–∞–º –ø–æ—Å–ª–µ digit_answer
async def transition_to_state_questions(message, state, data, key_word, key_1, key, redis):
    from handlers import answers_dict, questions_dict
    if isinstance(questions_dict[key_1][1], str):
        await state.update_data(
            msg_text=data["msg_text"] + "\n" + questions_dict[key][0] + f" *{answers_dict[key_word]}*")
        del_mes_1 = await message.bot.send_message(chat_id=message.from_user.id,
                                                   text=data["msg_text"] + "\n" + questions_dict[key][0] +
                                                                           f" *{answers_dict[key_word]}*")
        del_mes_2 = await message.bot.send_message(chat_id=message.from_user.id,
                                                   text=questions_dict[key_1][1],
                                                   reply_markup=questions_dict[key_1][2])
        await delete_redis_mes(message, redis, f"del_tech_{str(message.from_user.id)}")
        await redis.lpush(f"del_tech_{str(message.from_user.id)}", *[del_mes_1.message_id, del_mes_2.message_id])
        await state.update_data(q_num=data["q_num"] + 1)
        return
    else:
        del_mes_1 = await message.bot.send_message(chat_id=message.from_user.id,
                                                   text=data["msg_text"] + "\n" + questions_dict[key][0] +
                                                                           f" *{answers_dict[key_word]}*\n*"
                                                                           f"{questions_dict[key_1][0]}*",
                                                   reply_markup=questions_dict[key_1][1])
        await state.update_data(msg_text=data["msg_text"] + "\n" + questions_dict[key][0] +
                                                            f" *{answers_dict[key_word]}*\n{questions_dict[key_1][0]}")
        await delete_redis_mes(message, redis, f"del_tech_{str(message.from_user.id)}")
        await redis.lpush(f"del_tech_{str(message.from_user.id)}", *[del_mes_1.message_id])
        await state.update_data(q_num=data["q_num"] + 1)
        await state.set_state(MedExam.questions)


# –§—É–Ω–∫—Ü–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞—é—â–∞—è –≤–æ–ø—Ä–æ—Å—ã, –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
async def skip_multiple_cond_q(state, data, questions_list):
    while "s" in str(questions_list[data["q_num"]+1]):
        await state.update_data(q_num=data["q_num"] + 1)
        data = await state.get_data()
    key_1 = questions_list[data["q_num"]+1]
    return data, key_1


async def write_answer_to_dict(callback, state, param: str, score: str = "", f_data: str = ""):
    from handlers import questions_list, answers_dict, questions_dict
    data = await state.get_data()
    msg_text = data["msg_text"]
    key = questions_list[data["q_num"]]
    param_to_text_keyboard = {
        "y": ("y_", "", "", "", questions_dict[key][1]),
        "n": ("n_", "", "", "", questions_dict[key][1]),
        "f": ("f_" + score + "_", "", "", "\n(" + score + " –±–∞–ª–ª" + f_data, questions_dict[key][1]),
        "l": ("", "_" + score, answers_dict.get("d_c_2", "") + " –º–µ—Å. ", "", level_ikb()),
        "r": ("", "_" + score, "", "", questions_dict[key][1]),
        "b": ("w_", "", "", "", questions_dict.get(key,
              ["", "", None])[2] if len(questions_dict.get(key, ("",))) > 2 else None),
        "w": ("w_", "", "", "", None)
    }
    pref_k_word, post_k_word, pref_ans, post_ans, keyb = param_to_text_keyboard[param]
    key_word = pref_k_word + key + post_k_word
    if param == "w":
        answers_dict[key_word] = callback.text
        return data, msg_text, key, key_word
    answers_dict[key_word] = pref_ans + await get_button_text_from_keyboard(callback, keyb) + post_ans
    return data, msg_text, key, key_word


# –§—É–Ω–∫—Ü–∏—è, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—â–∞—è –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ
def get_month_name(month_str):
    months = {
        '1': '—è–Ω–≤–∞—Ä—è', '2': '—Ñ–µ–≤—Ä–∞–ª—è', '3': '–º–∞—Ä—Ç–∞', '4': '–∞–ø—Ä–µ–ª—è',
        '5': '–º–∞—è', '6': '–∏—é–Ω—è', '7': '–∏—é–ª—è', '8': '–∞–≤–≥—É—Å—Ç–∞',
        '9': '—Å–µ–Ω—Ç—è–±—Ä—è', '10': '–æ–∫—Ç—è–±—Ä—è', '11': '–Ω–æ—è–±—Ä—è', '12': '–¥–µ–∫–∞–±—Ä—è'
    }
    return months.get(month_str, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Å—è—Ü')


# –ú–µ—Ç–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–ø—Ä–∞–≤–∫–µ –ú–°–≠
async def mse_text_message(callback, state, redis):
    del_mes_1 = await callback.bot.send_photo(
        chat_id=callback.from_user.id,
        caption="üìÑ –í–≤–µ–¥–∏—Ç–µ *–Ω–æ–º–µ—Ä, —Å–µ—Ä–∏—é –∏ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏* –í–∞—à–µ–π —Å–ø—Ä–∞–≤–∫–∏ –ú–°–≠:\n\nüñº –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∏–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ, "
                "–≥–¥–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ.\nüìå –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: *'–ú–°–≠-2006 0005220136 22.05.2007'*",
        reply_markup=cancel_kb("certification", "–°–µ—Ä–∏—è –ù–æ–º–µ—Ä –î–∞—Ç–∞"),
        photo=types.FSInputFile(Path("data/med_certificate/msa_example.jpg")),
        show_caption_above_media=True)
    await redis.lpush(f"del_mes_{str(callback.from_user.id)}", *[del_mes_1.message_id])
    await state.set_state(Certificates.c70_mse)


# –ú–µ—Ç–æ–¥, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏—Å–ø–∞–Ω—Å–µ—Ä–∏–∑–∞—Ü–∏–∏
async def message_is_too_long(callback, state, data, answers_dict, key_word, questions_dict, key_1, e, redis):
    if 'MESSAGE_TOO_LONG' in str(e):
        await callback.message.edit_reply_markup(None)
        del_mes_1 = await callback.message.answer(text=f"*{answers_dict[key_word]}*\n*{questions_dict[key_1][0]}*",
                                                  reply_markup=questions_dict[key_1][1])
        # –ü—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å–∏–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –æ–Ω –Ω–µ —É–¥–∞–ª—è–ª—Å—è —Ä–∞–Ω—å—à–µ –Ω—É–∂–Ω–æ–≥–æ
        message_ids = await redis.lrange(f"del_tech_{callback.from_user.id}", 0, -1)
        if message_ids:
            await redis.lpush(f"del_mes_{callback.from_user.id}", message_ids[-1])
            # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ —Å–∞–º–æ–π –∞–Ω–∫–µ—Ç—ã
            for msg_id in message_ids[:-1]:
                await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=int(msg_id))
            await redis.delete(f"del_tech_{callback.from_user.id}")
        await redis.lpush(f"del_tech_{str(callback.from_user.id)}", *[del_mes_1.message_id])
        await state.update_data(msg_text=f"*{answers_dict[key_word]}*\n{questions_dict[key_1][0]}")
        await state.update_data(q_num=data["q_num"] + 1)


# –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–º–µ–Ω—Ç—ã –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç –¥–ª—è –¥–∏—Å–ø–∞–Ω—Å–µ—Ä–∏–∑–∞—Ü–∏–π —É –∂–µ–Ω—â–∏–Ω
async def skip_questions_women_med_exam(callback, state, data, key_word, redis):
    from handlers import questions_dict, answers_dict, questions_list
    await state.update_data(q_num=data["q_num"] + 1)
    data = await state.get_data()
    key_1 = questions_list[data["q_num"] + 1]
    if questions_list[data["q_num"]] == "10_a":
        await callback.message.edit_text(text=data["msg_text"] + f" (*{answers_dict[key_word]}*)", reply_markup=None)
        await state.update_data(msg_text=data["msg_text"] + f" (*{answers_dict[key_word]}*)")
        await state.set_state(MedExam.digit_answer)
    else:
        await state.update_data(msg_text=data["msg_text"] + f" *{answers_dict[key_word]}*\n{questions_dict[key_1][0]}")
    del_mes_2 = await callback.bot.send_message(chat_id=callback.from_user.id,
                                                text=questions_dict[key_1][1],
                                                reply_markup=questions_dict[key_1][2])
    await redis.lpush(f"del_mes_{str(callback.from_user.id)}", *[del_mes_2.message_id])
    await state.update_data(q_num=data["q_num"] + 1)
